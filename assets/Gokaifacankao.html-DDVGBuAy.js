import{_ as t,r as p,o as i,c as o,b as n,d as s,e,a as l}from"./app-De5JuplM.js";const c={},u=n("h2",{id:"go-mod-使用方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#go-mod-使用方法"},[n("span",null,"go mod 使用方法")])],-1),r={href:"http://docs.iris.elevue.easygoadmin.vip/#/started?id=backend",target:"_blank",rel:"noopener noreferrer"},d=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 初始化模块</span></span>
<span class="line">go mod init <span class="token operator">&lt;</span>项目模块名称<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line">go mod edit:编辑go.mod文件，选项有-json、-require和-exclude，可以使用帮助 go <span class="token builtin class-name">help</span> mod edit</span>
<span class="line"></span>
<span class="line">go mod graph:以文本模式打印模块需求图</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 依赖关系处理 ,根据go.mod文件</span></span>
<span class="line">go mod tidy</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 将依赖包复制到项目下的 vendor目录。</span></span>
<span class="line">go mod vendor</span>
<span class="line"><span class="token comment"># 如果包被屏蔽(墙),可以使用这个命令，随后使用 go build -mod=vendor编译</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 验证依赖是否正确</span></span>
<span class="line">go mod verify</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查找依赖</span></span>
<span class="line">go mod why</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 显示依赖关系</span></span>
<span class="line">go list <span class="token parameter variable">-m</span> all</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 显示详细依赖关系</span></span>
<span class="line">go list <span class="token parameter variable">-m</span> <span class="token parameter variable">-json</span> all</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 下载依赖</span></span>
<span class="line">go mod download <span class="token punctuation">[</span>path@version<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="golang-cobra-command-详解-三" tabindex="-1"><a class="header-anchor" href="#golang-cobra-command-详解-三"><span>Golang Cobra Command 详解（三）</span></a></h2>`,2),k={href:"https://blog.csdn.net/Meyerheim1/article/details/121530390",target:"_blank",rel:"noopener noreferrer"},m=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token keyword">type</span> Command <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token comment">// Use 表示用一句话来描述这个命令作用，这段话的第一个单词会被作为这个命令的名称</span></span>
<span class="line"> <span class="token comment">// 这个设置在子命令中生效，对于根命令则没有意义</span></span>
<span class="line"> Use <span class="token builtin">string</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// Alias 可以用来给子命令定义别名，除了使用 Use 中的第一个单词作为子命令外，你还可以使用这个 Alias</span></span>
<span class="line"> <span class="token comment">// 里面定义的任何一个名称作为子命令名称</span></span>
<span class="line"> Aliases <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// SuggestFor 定义一组提示命令，当输入匹配其中任何一个命令的时候，会提示是否希望输入的为 echo 命令</span></span>
<span class="line"> SuggestFor <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// Short 是用来在帮助信息位置显示的简短命令帮助</span></span>
<span class="line"> Short <span class="token builtin">string</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// Long 是用来在使用命令 &#39;help &lt;this-command&gt;&#39; 显示帮助信息时显示的长文字</span></span>
<span class="line"> Long <span class="token builtin">string</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// Example 用来定义子命令使用的具体示例，可以在里面定义多行不同的命令使用样例，供用户参考，这一点在</span></span>
<span class="line"> <span class="token comment">// Kubectl 命令中体现的非常明显，因为 Kubectl 命令很复杂，参数也很多，所有样例会极大方便用户</span></span>
<span class="line"> Example <span class="token builtin">string</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// ValidArgs 是一组可用在 Bash 补全中的合法的非选项参数</span></span>
<span class="line"> ValidArgs <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span></span>
<span class="line"> <span class="token comment">// ValidArgsFunction is an optional function that provides valid non-flag arguments for shell completion.</span></span>
<span class="line"> <span class="token comment">// It is a dynamic version of using ValidArgs.</span></span>
<span class="line"> <span class="token comment">// Only one of ValidArgs and ValidArgsFunction can be used for a command.</span></span>
<span class="line"> ValidArgsFunction <span class="token keyword">func</span><span class="token punctuation">(</span>cmd <span class="token operator">*</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> toComplete <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> ShellCompDirective<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// Args 表示期望的参数</span></span>
<span class="line"> Args PositionalArgs</span>
<span class="line"></span>
<span class="line"> <span class="token comment">// ArgAliases 是 ValidArgs 的一组别名</span></span>
<span class="line"> <span class="token comment">// 这些参数不会在 Bash 补全中提示给用户，但是如果手动输入的话，也是允许的</span></span>
<span class="line"> ArgAliases <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// BashCompletionFunction 是 Bash 自动补全生成器使用的自定义函数</span></span>
<span class="line"> BashCompletionFunction <span class="token builtin">string</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// Deprecated 不为空的时候，在命令执行时都会提示命令已废弃，并且输出这段文字</span></span>
<span class="line"> Deprecated <span class="token builtin">string</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// Annotations 定义一些键值对，应用可以用这些注解来分组命令，主要用于标注上面的分组</span></span>
<span class="line"> Annotations <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// Version 定义这个命令的版本。当 Version 值不为空，且命令没有定义 version 选项的时候，会自动给这个命令增加一个</span></span>
<span class="line"> <span class="token comment">// boolean 类型，名称为 version 的选项。如果指定这个选项，就会输出这里 Version 的值。</span></span>
<span class="line"> Version <span class="token builtin">string</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">//  下面的这组 Run 函数执行顺序为：</span></span>
<span class="line"> <span class="token comment">//   * PersistentPreRun()</span></span>
<span class="line"> <span class="token comment">//   * PreRun()</span></span>
<span class="line"> <span class="token comment">//   * Run()</span></span>
<span class="line"> <span class="token comment">//   * PostRun()</span></span>
<span class="line"> <span class="token comment">//   * PersistentPostRun()</span></span>
<span class="line"> <span class="token comment">// 所有的函数传入的参数都相同，都是命令名称之后的参数</span></span>
<span class="line"> <span class="token comment">//</span></span>
<span class="line"> <span class="token comment">// PersistentPreRun 这个命令的子命令都将继承并执行这个函数</span></span>
<span class="line"> PersistentPreRun <span class="token keyword">func</span><span class="token punctuation">(</span>cmd <span class="token operator">*</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// PersistentPreRunE 和 PersistentPreRun 一样，但是遇到错误时可以返回一个错误</span></span>
<span class="line"> <span class="token comment">// 一旦这个函数返回的 error 不为 nil，那么执行就中断了。所以你可以在这个函数里面</span></span>
<span class="line"> <span class="token comment">// 做诸如权限验证等等全局性的工作</span></span>
<span class="line"> PersistentPreRunE <span class="token keyword">func</span><span class="token punctuation">(</span>cmd <span class="token operator">*</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// PreRun 这个命令的子命令不会继承和运行这个函数</span></span>
<span class="line"> PreRun <span class="token keyword">func</span><span class="token punctuation">(</span>cmd <span class="token operator">*</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// PreRunE 和 PreRun 一样，但是遇到错误时可以返回一个错误</span></span>
<span class="line"> <span class="token comment">// 一旦这个函数返回的 error 不为 nil，那么执行就中断了。所以你可以在这个函数里面</span></span>
<span class="line"> <span class="token comment">// 做一些和该命令相关的输入参数检测之类的工作</span></span>
<span class="line"> PreRunE <span class="token keyword">func</span><span class="token punctuation">(</span>cmd <span class="token operator">*</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// Run 命令核心工作所在的函数，大多数情况下只实现这个命令即可</span></span>
<span class="line"> Run <span class="token keyword">func</span><span class="token punctuation">(</span>cmd <span class="token operator">*</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// RunE 和 Run 一样，但是遇到错误时可以返回一个错误</span></span>
<span class="line"> <span class="token comment">// 一旦这个函数返回的 error 不为 nil，那么执行就中断了。</span></span>
<span class="line"> RunE <span class="token keyword">func</span><span class="token punctuation">(</span>cmd <span class="token operator">*</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// PostRun 在 Run 函数执行之后执行</span></span>
<span class="line"> PostRun <span class="token keyword">func</span><span class="token punctuation">(</span>cmd <span class="token operator">*</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// PostRunE 在 PostRun 之后执行，但是可以返回一个错误</span></span>
<span class="line"> <span class="token comment">// 一旦这个函数返回的 error 不为 nil，那么执行就中断了。</span></span>
<span class="line"> PostRunE <span class="token keyword">func</span><span class="token punctuation">(</span>cmd <span class="token operator">*</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// PersistentPostRun 在 PostRun 之后执行，这个命令的子命令都将继承并执行这个函数</span></span>
<span class="line"> PersistentPostRun <span class="token keyword">func</span><span class="token punctuation">(</span>cmd <span class="token operator">*</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// PersistentPostRunE 和 PersistentPostRun 一样，但是可以返回一个错误</span></span>
<span class="line"> <span class="token comment">// 一旦这个函数返回的 error 不为 nil，那么执行就中断了。</span></span>
<span class="line"> PersistentPostRunE <span class="token keyword">func</span><span class="token punctuation">(</span>cmd <span class="token operator">*</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// args is actual args parsed from flags.</span></span>
<span class="line"> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span></span>
<span class="line"> <span class="token comment">// flagErrorBuf contains all error messages from pflag.</span></span>
<span class="line"> flagErrorBuf <span class="token operator">*</span>bytes<span class="token punctuation">.</span>Buffer</span>
<span class="line"> <span class="token comment">// flags is full set of flags.</span></span>
<span class="line"> flags <span class="token operator">*</span>flag<span class="token punctuation">.</span>FlagSet</span>
<span class="line"> <span class="token comment">// pflags contains persistent flags.</span></span>
<span class="line"> pflags <span class="token operator">*</span>flag<span class="token punctuation">.</span>FlagSet</span>
<span class="line"> <span class="token comment">// lflags contains local flags.</span></span>
<span class="line"> lflags <span class="token operator">*</span>flag<span class="token punctuation">.</span>FlagSet</span>
<span class="line"> <span class="token comment">// iflags contains inherited flags.</span></span>
<span class="line"> iflags <span class="token operator">*</span>flag<span class="token punctuation">.</span>FlagSet</span>
<span class="line"> <span class="token comment">// parentsPflags is all persistent flags of cmd&#39;s parents.</span></span>
<span class="line"> parentsPflags <span class="token operator">*</span>flag<span class="token punctuation">.</span>FlagSet</span>
<span class="line"> <span class="token comment">// globNormFunc is the global normalization function</span></span>
<span class="line"> <span class="token comment">// that we can use on every pflag set and children commands</span></span>
<span class="line"> globNormFunc <span class="token keyword">func</span><span class="token punctuation">(</span>f <span class="token operator">*</span>flag<span class="token punctuation">.</span>FlagSet<span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">)</span> flag<span class="token punctuation">.</span>NormalizedName</span>
<span class="line"></span>
<span class="line"> <span class="token comment">// usageFunc is usage func defined by user.</span></span>
<span class="line"> usageFunc <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>Command<span class="token punctuation">)</span> <span class="token builtin">error</span></span>
<span class="line"> <span class="token comment">// usageTemplate is usage template defined by user.</span></span>
<span class="line"> usageTemplate <span class="token builtin">string</span></span>
<span class="line"> <span class="token comment">// flagErrorFunc is func defined by user and it&#39;s called when the parsing of</span></span>
<span class="line"> <span class="token comment">// flags returns an error.</span></span>
<span class="line"> flagErrorFunc <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>Command<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span></span>
<span class="line"> <span class="token comment">// helpTemplate is help template defined by user.</span></span>
<span class="line"> helpTemplate <span class="token builtin">string</span></span>
<span class="line"> <span class="token comment">// helpFunc is help func defined by user.</span></span>
<span class="line"> helpFunc <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>Command<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">//helpCommand “help”的命令。不自定义使用默认</span></span>
<span class="line"> helpCommand <span class="token operator">*</span>Command</span>
<span class="line"> <span class="token comment">// versionTemplate is the version template defined by user.</span></span>
<span class="line"> versionTemplate <span class="token builtin">string</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// inReader is a reader defined by the user that replaces stdin</span></span>
<span class="line"> inReader io<span class="token punctuation">.</span>Reader</span>
<span class="line"> <span class="token comment">// outWriter is a writer defined by the user that replaces stdout</span></span>
<span class="line"> outWriter io<span class="token punctuation">.</span>Writer</span>
<span class="line"> <span class="token comment">// errWriter is a writer defined by the user that replaces stderr</span></span>
<span class="line"> errWriter io<span class="token punctuation">.</span>Writer</span>
<span class="line"></span>
<span class="line"> <span class="token comment">//FParseErrWhitelist 定义可以被忽略的解析错误</span></span>
<span class="line"> FParseErrWhitelist FParseErrWhitelist</span>
<span class="line"></span>
<span class="line"> <span class="token comment">// CompletionOptions is a set of options to control the handling of shell completion</span></span>
<span class="line"> CompletionOptions CompletionOptions</span>
<span class="line"></span>
<span class="line"> <span class="token comment">// commandsAreSorted defines, if command slice are sorted or not.</span></span>
<span class="line"> commandsAreSorted <span class="token builtin">bool</span></span>
<span class="line"> <span class="token comment">// commandCalledAs 用于调用此命令的名称或别名值。</span></span>
<span class="line"> commandCalledAs <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">  name   <span class="token builtin">string</span></span>
<span class="line">  called <span class="token builtin">bool</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"> ctx context<span class="token punctuation">.</span>Context</span>
<span class="line"></span>
<span class="line"> <span class="token comment">//commands 支持的命令列表。</span></span>
<span class="line"> commands <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Command</span>
<span class="line"> <span class="token comment">// parent是此命令的父命令。</span></span>
<span class="line"> parent <span class="token operator">*</span>Command</span>
<span class="line"> <span class="token comment">// Max lengths of commands&#39; string lengths for use in padding.</span></span>
<span class="line"> commandsMaxUseLen         <span class="token builtin">int</span></span>
<span class="line"> commandsMaxCommandPathLen <span class="token builtin">int</span></span>
<span class="line"> commandsMaxNameLen        <span class="token builtin">int</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// TraverseChildren 在执行该命令子命令前，解析所有父命令的选项</span></span>
<span class="line"> TraverseChildren <span class="token builtin">bool</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// Hidden 参数设置为 true 的时候，将无法在命令帮助列表中看到这个命令，但是实际这个命令仍然是可用的，一般用于</span></span>
<span class="line"> <span class="token comment">// 对命令做向下兼容的处理，在未来的版本中如果这个命令会废弃，那么先让它隐藏起来会比直接删除较好</span></span>
<span class="line"> Hidden <span class="token builtin">bool</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// SilenceErrors 设置为 true 时可以在命令执行过程中遇到任何错误时，不显示错误</span></span>
<span class="line"> SilenceErrors <span class="token builtin">bool</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// SilenceUsage 设置为 true 时可以在命令执行遇到输入错误时，不显示使用方法</span></span>
<span class="line"> SilenceUsage <span class="token builtin">bool</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// DisableFlagParsing 设置为 true 时将禁用选项解析功能，这样命令之后所有的内容</span></span>
<span class="line"> DisableFlagParsing <span class="token builtin">bool</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// DisableAutoGenTag 在生成命令文档的时候是否显示 gen tag</span></span>
<span class="line"> DisableAutoGenTag <span class="token builtin">bool</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// DisableFlagsInUseLine 设置为 true 的时候，将不会在命令帮助信息或者文档中显示命令支持的选项</span></span>
<span class="line"> DisableFlagsInUseLine <span class="token builtin">bool</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// DisableSuggestions 禁用命令提示</span></span>
<span class="line"> DisableSuggestions <span class="token builtin">bool</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// SuggestionsMinimumDistance 定义显示命令提示的最小的 Levenshtein 距离</span></span>
<span class="line"> SuggestionsMinimumDistance <span class="token builtin">int</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mysql-操作" tabindex="-1"><a class="header-anchor" href="#mysql-操作"><span>mysql 操作</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment">#登录mysql</span></span>
<span class="line">mysql -u<span class="token operator">&lt;</span>用户名<span class="token operator">&gt;</span> -p<span class="token operator">&lt;</span>密码<span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">#查看数据库</span></span>
<span class="line">show databases<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">drop DATABASE GinMasterReWi<span class="token punctuation">;</span></span>
<span class="line">CREATE DATABASE IF NOT EXISTS GinMasterReWi DEFAULT CHARSET utf8 COLLATE utf8_general_ci<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">use GinMasterReWi<span class="token punctuation">;</span></span>
<span class="line">show tables<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="golang-使用文档" tabindex="-1"><a class="header-anchor" href="#golang-使用文档"><span>GoLang 使用文档</span></a></h2>`,4),v={href:"https://www.runoob.com/go/go-functions.html",target:"_blank",rel:"noopener noreferrer"},g={href:"http://c.biancheng.net/view/124.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://haicoder.net/golang/golang-string-contains.html",target:"_blank",rel:"noopener noreferrer"},h=n("h2",{id:"扫描文件夹",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#扫描文件夹"},[n("span",null,"扫描文件夹")])],-1),f={href:"https://blog.csdn.net/HYZX_9987/article/details/100072442",target:"_blank",rel:"noopener noreferrer"},_=n("h2",{id:"go-语言获取文件的名称、前缀、后缀",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#go-语言获取文件的名称、前缀、后缀"},[n("span",null,"Go 语言获取文件的名称、前缀、后缀")])],-1),w={href:"https://www.jb51.net/article/211509.htm",target:"_blank",rel:"noopener noreferrer"},y=n("h2",{id:"golang-字符串转大小写",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#golang-字符串转大小写"},[n("span",null,"golang 字符串转大小写")])],-1),q={href:"https://blog.csdn.net/eight_eyes/article/details/117695853",target:"_blank",rel:"noopener noreferrer"},x=n("h2",{id:"go-语言读写-excel",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#go-语言读写-excel"},[n("span",null,"Go 语言读写 Excel")])],-1),P={href:"https://blog.csdn.net/mrxuri/article/details/53842834",target:"_blank",rel:"noopener noreferrer"},j={href:"https://www.jb51.net/article/264269.htm",target:"_blank",rel:"noopener noreferrer"},R=n("h2",{id:"go-获取当前时间-以及时间格式转换",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#go-获取当前时间-以及时间格式转换"},[n("span",null,"go 获取当前时间，以及时间格式转换")])],-1),S={href:"https://blog.csdn.net/weixin_48536164/article/details/126760855",target:"_blank",rel:"noopener noreferrer"},G=n("h2",{id:"go-局部变量-全局变量",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#go-局部变量-全局变量"},[n("span",null,"Go 局部变量&全局变量")])],-1),C={href:"https://blog.csdn.net/wangming520liwei/article/details/122136288",target:"_blank",rel:"noopener noreferrer"},T=n("h2",{id:"go-判断字符串里是否包含子字符串-支持费操作",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#go-判断字符串里是否包含子字符串-支持费操作"},[n("span",null,"go 判断字符串里是否包含子字符串 支持费操作")])],-1),A={href:"https://blog.csdn.net/m0_37684037/article/details/106243897",target:"_blank",rel:"noopener noreferrer"},E=n("h2",{id:"golang-读取文件-按行读取-写入文件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#golang-读取文件-按行读取-写入文件"},[n("span",null,"golang 读取文件，按行读取，写入文件")])],-1),F={href:"https://blog.csdn.net/raoxiaoya/article/details/117998066",target:"_blank",rel:"noopener noreferrer"},M={href:"https://www.jb51.net/article/262878.htm",target:"_blank",rel:"noopener noreferrer"},B={href:"https://www.cnblogs.com/ljymoonlight/p/15820236.html",target:"_blank",rel:"noopener noreferrer"},D=n("h2",{id:"go-语言中常用的功能之四-正则匹配",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#go-语言中常用的功能之四-正则匹配"},[n("span",null,"go 语言中常用的功能之四（正则匹配）")])],-1),z={href:"https://blog.csdn.net/wujiangwei567/article/details/86593396",target:"_blank",rel:"noopener noreferrer"},O={href:"https://www.jb51.net/article/181664.htm",target:"_blank",rel:"noopener noreferrer"},N={href:"https://c.runoob.com/front-end/854/",target:"_blank",rel:"noopener noreferrer"},L=n("h2",{id:"go-简单入门-返回和处理一个错误",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#go-简单入门-返回和处理一个错误"},[n("span",null,"GO 简单入门：返回和处理一个错误")])],-1),U={href:"https://www.runoob.com/go/go-error-handling.html",target:"_blank",rel:"noopener noreferrer"},V={href:"https://blog.csdn.net/hefrankeleyn/article/details/126415972",target:"_blank",rel:"noopener noreferrer"},W=n("h2",{id:"golang-go-中字符串和各种-int-类型之间的相互转换方式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#golang-go-中字符串和各种-int-类型之间的相互转换方式"},[n("span",null,"golang go 中字符串和各种 int 类型之间的相互转换方式")])],-1),Y={href:"https://www.cnblogs.com/zhaoyingjie/p/15702174.html",target:"_blank",rel:"noopener noreferrer"},I=n("h2",{id:"添加可执行文件图标",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#添加可执行文件图标"},[n("span",null,"添加可执行文件图标")])],-1),X={href:"https://www.shuzhiduo.com/A/rV57RaeXJP/",target:"_blank",rel:"noopener noreferrer"},J=n("h2",{id:"go-语言-json",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#go-语言-json"},[n("span",null,"Go 语言 JSON")])],-1),H={href:"https://zhuanlan.zhihu.com/p/393998886",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://blog.csdn.net/arv002/article/details/116029758",target:"_blank",rel:"noopener noreferrer"},K={href:"https://www.mianshigee.com/question/127883drr/",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://blog.csdn.net/weixin_41670928/article/details/122569045",target:"_blank",rel:"noopener noreferrer"},$={href:"https://blog.csdn.net/weixin_44328568/article/details/120517480",target:"_blank",rel:"noopener noreferrer"},nn=n("h2",{id:"golang-字符串-去首尾字符",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#golang-字符串-去首尾字符"},[n("span",null,"golang 字符串 去首尾字符")])],-1),sn={href:"https://blog.csdn.net/whatday/article/details/109278821",target:"_blank",rel:"noopener noreferrer"},an=n("h2",{id:"判断子串",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#判断子串"},[n("span",null,"判断子串")])],-1),en={href:"https://blog.csdn.net/HYZX_9987/article/details/100072442",target:"_blank",rel:"noopener noreferrer"},ln=n("h2",{id:"条件编译",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#条件编译"},[n("span",null,"条件编译")])],-1),tn={href:"https://www.cnblogs.com/ksir16/p/9050721.html",target:"_blank",rel:"noopener noreferrer"},pn={href:"https://www.xhyonline.com/?p=1182",target:"_blank",rel:"noopener noreferrer"},on=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 安装依赖</span></span>
<span class="line">go mod tidy</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 运行项目</span></span>
<span class="line">go run main.go</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 构建执行命令</span></span>
<span class="line">go build <span class="token parameter variable">-o</span> BOEVXAGoScreenTester.exe ./BOEVXAGoScreenTester.go</span>
<span class="line">go build <span class="token parameter variable">-o</span> BOEVXAGoTouchReader.exe ./BOEVXAGoTouchReader.go</span>
<span class="line">go build <span class="token parameter variable">-o</span> BOEVXAGoReader.exe <span class="token builtin class-name">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="go-字符串切割方法小结" tabindex="-1"><a class="header-anchor" href="#go-字符串切割方法小结"><span>go 字符串切割方法小结</span></a></h2>`,2),cn={href:"https://www.cnblogs.com/zxqblogrecord/p/13303212.html",target:"_blank",rel:"noopener noreferrer"},un=n("h2",{id:"go-语言测试",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#go-语言测试"},[n("span",null,"Go 语言测试")])],-1),rn={href:"https://blog.csdn.net/qq_46284579/article/details/121367133",target:"_blank",rel:"noopener noreferrer"},dn=l(`<p>go test 命令会遍历所有的*_test.go 文件中符合上述命名规则的函数，然后生成一个临时的 main 包用于调用相应的测试函数，然后构建并运行、报告测试结果，最后清理测试中生成的临时文件。 测试函数的名字必须以 Test 开头，可选的后缀名必须以大写字母开头 我们都知道可以通过-run=RegExp 来指定运行的测试用例，还可以通过/来指定要运行的子测试用例，例如：go test -v -run=Split/simple 只会运行 simple 对应的子测试用例。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token keyword">func</span> <span class="token function">TestMoreSplit</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">type</span> test <span class="token keyword">struct</span> <span class="token punctuation">{</span> <span class="token comment">// 定义test结构体</span></span>
<span class="line">input <span class="token builtin">string</span></span>
<span class="line">sep   <span class="token builtin">string</span></span>
<span class="line">want  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">tests <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>test<span class="token punctuation">{</span> <span class="token comment">// 测试用例使用map存储</span></span>
<span class="line"><span class="token string">&quot;simple&quot;</span><span class="token punctuation">:</span>      <span class="token punctuation">{</span>input<span class="token punctuation">:</span> <span class="token string">&quot;a:b:c&quot;</span><span class="token punctuation">,</span> sep<span class="token punctuation">:</span> <span class="token string">&quot;:&quot;</span><span class="token punctuation">,</span> want<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token string">&quot;wrong sep&quot;</span><span class="token punctuation">:</span>   <span class="token punctuation">{</span>input<span class="token punctuation">:</span> <span class="token string">&quot;a:b:c&quot;</span><span class="token punctuation">,</span> sep<span class="token punctuation">:</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">,</span> want<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;a:b:c&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token string">&quot;more sep&quot;</span><span class="token punctuation">:</span>    <span class="token punctuation">{</span>input<span class="token punctuation">:</span> <span class="token string">&quot;abcd&quot;</span><span class="token punctuation">,</span> sep<span class="token punctuation">:</span> <span class="token string">&quot;bc&quot;</span><span class="token punctuation">,</span> want<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token string">&quot;leading sep&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>input<span class="token punctuation">:</span> <span class="token string">&quot;沙河有沙又有河&quot;</span><span class="token punctuation">,</span> sep<span class="token punctuation">:</span> <span class="token string">&quot;沙&quot;</span><span class="token punctuation">,</span> want<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;河有&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;又有河&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">for</span> name<span class="token punctuation">,</span> tc <span class="token operator">:=</span> <span class="token keyword">range</span> tests <span class="token punctuation">{</span></span>
<span class="line">t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 使用t.Run()执行子测试</span></span>
<span class="line">got <span class="token operator">:=</span> <span class="token function">Split</span><span class="token punctuation">(</span>tc<span class="token punctuation">.</span>input<span class="token punctuation">,</span> tc<span class="token punctuation">.</span>sep<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token operator">!</span>reflect<span class="token punctuation">.</span><span class="token function">DeepEqual</span><span class="token punctuation">(</span>got<span class="token punctuation">,</span> tc<span class="token punctuation">.</span>want<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;expected:%#v, got:%#v&quot;</span><span class="token punctuation">,</span> tc<span class="token punctuation">.</span>want<span class="token punctuation">,</span> got<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment">#-v参数，查看测试函数名称和运行时间</span></span>
<span class="line"><span class="token comment">#-run参数，它对应一个正则表达式，只有函数名匹配上的测试函数才会被go test命令执行。</span></span>
<span class="line"><span class="token comment">#-cover来查看测试覆盖率</span></span>
<span class="line"><span class="token comment">#-coverprofile参数，用来将覆盖率相关的记录信息输出到一个文件。</span></span>
<span class="line">go <span class="token builtin class-name">test</span> <span class="token parameter variable">-v</span> <span class="token parameter variable">-run</span><span class="token operator">=</span><span class="token string">&quot;More&quot;</span> <span class="token parameter variable">-cover</span> <span class="token parameter variable">-coverprofile</span><span class="token operator">=</span>c.out</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的命令会将覆盖率相关的信息输出到当前文件夹下面的 c.out 文件中，然后我们执行 go tool cover -html=c.out，使用 cover 工具来处理生成的记录信息，该命令会打开本地的浏览器窗口生成一个 HTML 报告。</p><h3 id="基准测试" tabindex="-1"><a class="header-anchor" href="#基准测试"><span>基准测试</span></a></h3>`,5),kn={href:"https://blog.csdn.net/qq_46284579/article/details/121367133",target:"_blank",rel:"noopener noreferrer"},mn=l(`<p>基准测试以 Benchmark 为前缀，需要一个*testing.B 类型的参数 b，基准测试必须要执行 b.N 次，这样的测试才有对照性，b.N 的值是系统根据实际情况去调整的，从而保证测试的稳定性。 testing.B 拥有的方法如下：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token keyword">package</span> split</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;strings&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// split package with a single split function.</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Split slices s into all substrings separated by sep and</span></span>
<span class="line"><span class="token comment">// returns a slice of the substrings between those separators.</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">Split</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> sep <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>result <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  i <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> sep<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">for</span> i <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span></span>
<span class="line">    result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    s <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token function">len</span><span class="token punctuation">(</span>sep<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment">// 这里使用len(sep)获取sep的长度</span></span>
<span class="line">    i <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> sep<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> s<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//使用make函数将result初始化为一个容量足够大的切片，而不再像之前一样通过调用append函数来追加。看一下这个改进会带来多大的性能提升：减少了2/3的内存分配次数，并且减少了一半的内存分配。</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">Split</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> sep <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>result <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">result <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> sep<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">i <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> sep<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span></span>
<span class="line">result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">s <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token function">len</span><span class="token punctuation">(</span>sep<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment">// 这里使用len(sep)获取sep的长度</span></span>
<span class="line">i <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> sep<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> s<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">return</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">BenchmarkSplit</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">&quot;沙河有沙又有河&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;沙&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment">#基准测试并不会默认执行，需要增加-bench参数</span></span>
<span class="line"><span class="token comment">#-benchmem参数，来获得内存分配的统计数据。</span></span>
<span class="line">go <span class="token builtin class-name">test</span> <span class="token parameter variable">-bench</span><span class="token operator">=</span>Split <span class="token parameter variable">-benchmem</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>112 B/op 表示每次操作内存分配了 112 字节，3 allocs/op 则表示每次操作进行了 3 次内存分配。</p><h3 id="性能比较函数" tabindex="-1"><a class="header-anchor" href="#性能比较函数"><span>性能比较函数</span></a></h3><p>上面的基准测试只能得到给定操作的绝对耗时，但是在很多性能问题是发生在两个不同操作之间的相对耗时，比如同一个函数处理 1000 个元素的耗时与处理 1 万甚至 100 万个元素的耗时的差别是多少？ 通常需要对两个不同算法的实现使用相同的输入来进行基准比较测试。 性能比较函数通常是一个带有参数的函数，被多个不同的 Benchmark 函数传入不同的值来调用。举个例子如下：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token comment">// fib.go</span></span>
<span class="line"><span class="token comment">// Fib 是一个计算第n个斐波那契数的函数</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">Fib</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">return</span> n</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">return</span> <span class="token function">Fib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">Fib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// fib_test.go</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">benchmarkFib</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token function">Fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">BenchmarkFib1</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token function">benchmarkFib</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">BenchmarkFib2</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token function">benchmarkFib</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">BenchmarkFib3</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token function">benchmarkFib</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">BenchmarkFib10</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">benchmarkFib</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">BenchmarkFib20</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">benchmarkFib</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">BenchmarkFib40</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">benchmarkFib</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment">#-benchtime标志增加最小基准时间，以产生更准确的结果。</span></span>
<span class="line">go <span class="token builtin class-name">test</span> <span class="token parameter variable">-bench</span><span class="token operator">=</span>.</span>
<span class="line">go <span class="token builtin class-name">test</span> <span class="token parameter variable">-bench</span><span class="token operator">=</span>Fib40 <span class="token parameter variable">-benchtime</span><span class="token operator">=</span>20s</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="重置时间" tabindex="-1"><a class="header-anchor" href="#重置时间"><span>重置时间</span></a></h3><p>b.ResetTimer 之前的处理不会放到执行时间里，也不会输出到报告中，所以可以在之前做一些不计划作为测试报告的操作。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token keyword">func</span> <span class="token function">BenchmarkSplit</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span> <span class="token comment">// 假设需要做一些耗时的无关操作</span></span>
<span class="line"> b<span class="token punctuation">.</span><span class="token function">ResetTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment">// 重置计时器</span></span>
<span class="line"> <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">&quot;沙河有沙又有河&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;沙&quot;</span><span class="token punctuation">)</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="并行测试" tabindex="-1"><a class="header-anchor" href="#并行测试"><span>并行测试</span></a></h3><p>func (b *B) RunParallel(body func(*PB))会以并行的方式执行给定的基准测试。 RunParallel 会创建出多个 goroutine，并将 b.N 分配给这些 goroutine 执行， 其中 goroutine 数量的默认值为 GOMAXPROCS。用户如果想要增加非 CPU 受限（non-CPU-bound）基准测试的并行性， 那么可以在 RunParallel 之前调用 SetParallelism 。RunParallel 通常会与-cpu 标志一同使用。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token keyword">func</span> <span class="token function">BenchmarkSplitParallel</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token comment">// b.SetParallelism(1) // 设置使用的CPU数</span></span>
<span class="line"> b<span class="token punctuation">.</span><span class="token function">RunParallel</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>pb <span class="token operator">*</span>testing<span class="token punctuation">.</span>PB<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">for</span> pb<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">&quot;沙河有沙又有河&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;沙&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">go <span class="token builtin class-name">test</span> <span class="token parameter variable">-bench</span><span class="token operator">=</span>.</span>
<span class="line"><span class="token comment">#还可以通过在测试命令后添加-cpu参数如go test -bench=. -cpu 1来指定使用的CPU数量。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="setup-与-teardown" tabindex="-1"><a class="header-anchor" href="#setup-与-teardown"><span>Setup 与 TearDown</span></a></h3><p>测试程序有时需要在测试之前进行额外的设置（setup）或在测试之后进行拆卸（teardown）。 TestMain 运行在主 goroutine 中, 可以在调用 m.Run 前后做任何设置（setup）和拆卸（teardown）。退出测试的时候应该使用 m.Run 的返回值作为参数调用 os.Exit。 需要注意的是：在调用 TestMain 时, flag.Parse 并没有被调用。所以如果 TestMain 依赖于 command-line 标志 (包括 testing 包的标记), 则应该显示的调用 flag.Parse。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token keyword">func</span> <span class="token function">TestMain</span><span class="token punctuation">(</span>m <span class="token operator">*</span>testing<span class="token punctuation">.</span>M<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;write setup code here...&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 测试之前的做一些设置</span></span>
<span class="line"> <span class="token comment">// 如果 TestMain 使用了 flags，这里应该加上flag.Parse()</span></span>
<span class="line"> retCode <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                         <span class="token comment">// 执行测试</span></span>
<span class="line"> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;write teardown code here...&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 测试之后做一些拆卸工作</span></span>
<span class="line"> os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span>retCode<span class="token punctuation">)</span>                           <span class="token comment">// 退出测试</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例函数" tabindex="-1"><a class="header-anchor" href="#示例函数"><span>示例函数</span></a></h3><p>函数名以 Example 为前缀。它们既没有参数也没有返回值。标准格式如下： 为你的代码编写示例代码有如下三个用处：</p><ol><li>示例函数能够作为文档直接使用，例如基于 web 的 godoc 中能把示例函数与对应的函数或包相关联。</li><li>示例函数只要包含了// Output:也是可以通过 go test 运行的可执行测试。</li><li>示例函数提供了可以直接运行的示例代码，可以直接在 golang.org 的 godoc 文档服务器上使用 Go Playground 运行示例代码。</li></ol><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token keyword">func</span> <span class="token function">ExampleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//下面的代码是我们为Split函数编写的一个示例函数：</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">ExampleSplit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>split<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">&quot;a:b:c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>split<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">&quot;沙河有沙又有河&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;沙&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// Output:</span></span>
<span class="line"><span class="token comment">// [a b c]</span></span>
<span class="line"><span class="token comment">// [ 河有 又有河]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="go-test-提示-no-test-files" tabindex="-1"><a class="header-anchor" href="#go-test-提示-no-test-files"><span>go test 提示 no test files</span></a></h2>`,23),vn={href:"https://www.sunzhongwei.com/go-test-suggests-no-test-files",target:"_blank",rel:"noopener noreferrer"},gn=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token comment">//解决方法一</span></span>
<span class="line"><span class="token keyword">go</span> test <span class="token operator">-</span>v <span class="token punctuation">.</span><span class="token operator">/</span><span class="token operator">...</span></span>
<span class="line"><span class="token comment">//解决方法二</span></span>
<span class="line"><span class="token comment">//进入子目录执行：</span></span>
<span class="line">cd utils<span class="token operator">/</span></span>
<span class="line"><span class="token keyword">go</span> test <span class="token operator">-</span>v</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="go-语言主流开发框架参考" tabindex="-1"><a class="header-anchor" href="#go-语言主流开发框架参考"><span>go 语言主流开发框架参考</span></a></h2>`,2),bn={href:"https://www.topgoer.com/",target:"_blank",rel:"noopener noreferrer"},hn=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="go-语言递归创建目录" tabindex="-1"><a class="header-anchor" href="#go-语言递归创建目录"><span>go 语言递归创建目录</span></a></h2>`,2),fn={href:"https://blog.csdn.net/inthat/article/details/123727180",target:"_blank",rel:"noopener noreferrer"},_n=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line">os<span class="token punctuation">.</span><span class="token function">Mkdir</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>ModePerm<span class="token punctuation">)</span> <span class="token comment">//创建目录</span></span>
<span class="line">os<span class="token punctuation">.</span><span class="token function">MkdirAll</span><span class="token punctuation">(</span><span class="token string">&quot;dir1/dir2/dir3&quot;</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>ModePerm<span class="token punctuation">)</span> <span class="token comment">//创建多级目录</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//MkdirAll会创建一个名为path的目录以及任何必要的父项，并返回nil，否则返回错误。如果path已经是一个目录，MkdirAll什么也不做，并返回nil。</span></span>
<span class="line"><span class="token comment">//basePath是固定目录路径,不包含具体的文件名，如果你传成了 /home/xx.txt, xx.txt也会被当成目录</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">CreateDateDir</span><span class="token punctuation">(</span>basePath <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>dirPath <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">folderPath <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>basePath<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">err <span class="token operator">:=</span>os<span class="token punctuation">.</span><span class="token function">MkdirAll</span><span class="token punctuation">(</span>folderPath<span class="token punctuation">,</span> os<span class="token punctuation">.</span>ModePerm<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> err<span class="token operator">!=</span><span class="token boolean">nil</span><span class="token punctuation">{</span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;创建目录报错&quot;</span><span class="token punctuation">)</span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">return</span> folderPath</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//go创建文件带目录,并写入特定内容</span></span>
<span class="line"><span class="token comment">// create file with dir if dir is not exist</span></span>
<span class="line"><span class="token comment">// path is dir</span></span>
<span class="line"><span class="token comment">// name is file name</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">createFileWithDir</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">,</span> content <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">os<span class="token punctuation">.</span><span class="token function">MkdirAll</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> os<span class="token punctuation">.</span>ModePerm<span class="token punctuation">)</span></span>
<span class="line">file<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span>path <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_RDWR<span class="token operator">|</span>os<span class="token punctuation">.</span>O_CREATE<span class="token operator">|</span>os<span class="token punctuation">.</span>O_TRUNC<span class="token punctuation">,</span> <span class="token number">0666</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">file<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="gin-模板" tabindex="-1"><a class="header-anchor" href="#gin-模板"><span>Gin 模板</span></a></h2>`,2),wn={href:"https://zhuanlan.zhihu.com/p/429647200",target:"_blank",rel:"noopener noreferrer"},yn={href:"https://blog.csdn.net/Gherbirthday0916/article/details/124796907",target:"_blank",rel:"noopener noreferrer"},qn=n("h2",{id:"golang-中结构体当做函数参数或函数返回值都会被拷贝",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#golang-中结构体当做函数参数或函数返回值都会被拷贝"},[n("span",null,"golang 中结构体当做函数参数或函数返回值都会被拷贝")])],-1),xn={href:"http://www.manongjc.com/detail/26-mcscpivbfmypgug.html",target:"_blank",rel:"noopener noreferrer"},Pn=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line"> name <span class="token builtin">string</span></span>
<span class="line"> age <span class="token builtin">int</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">var</span> p <span class="token operator">=</span> Person<span class="token punctuation">{</span><span class="token string">&quot;武沛齐&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Person <span class="token punctuation">{</span></span>
<span class="line"> <span class="token comment">// 结构体做函数的参数或返回值时，都会被重新拷贝一份，如果不想拷贝，可以传递结构体指针</span></span>
<span class="line"> <span class="token keyword">return</span> <span class="token operator">&amp;</span>p</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> p1 <span class="token operator">:=</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"> p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;马亚南&quot;</span></span>
<span class="line"> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span></span>
<span class="line"> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="golang-里面关于-map-string-interface-取值问题" tabindex="-1"><a class="header-anchor" href="#golang-里面关于-map-string-interface-取值问题"><span>golang 里面关于 map[string]interface{}取值问题</span></a></h2>`,2),jn={href:"https://blog.csdn.net/begefefsef/article/details/126663175",target:"_blank",rel:"noopener noreferrer"},Rn=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line">a <span class="token operator">:=</span> data<span class="token punctuation">[</span><span class="token string">&quot;int&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span></span>
<span class="line">b <span class="token operator">:=</span> data<span class="token punctuation">[</span><span class="token string">&quot;string&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="go-获取数据类型和类型转换" tabindex="-1"><a class="header-anchor" href="#go-获取数据类型和类型转换"><span>go 获取数据类型和类型转换</span></a></h2>`,2),Sn={href:"https://blog.csdn.net/liulanba/article/details/128781269",target:"_blank",rel:"noopener noreferrer"},Gn=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="golang-字符串-转-时间类型" tabindex="-1"><a class="header-anchor" href="#golang-字符串-转-时间类型"><span>golang 字符串 转 时间类型</span></a></h2>`,2),Cn={href:"http://www.manongjc.com/detail/63-mkweyxulayhwydm.html",target:"_blank",rel:"noopener noreferrer"},Tn={href:"https://blog.csdn.net/yuezhilangniao/article/details/122763144",target:"_blank",rel:"noopener noreferrer"},An={href:"https://blog.csdn.net/z_xiaocun/article/details/46934223",target:"_blank",rel:"noopener noreferrer"},En={href:"https://blog.csdn.net/qq_42303254/article/details/117637436",target:"_blank",rel:"noopener noreferrer"},Fn=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token comment">//需要转换的 字符串 必须和时间常量 格式一致</span></span>
<span class="line"><span class="token comment">//正确例子：</span></span>
<span class="line"><span class="token comment">//“2006-01-02 15:04:05”, “2021-11-07 11:34:00”</span></span>
<span class="line"><span class="token comment">//“2006-01-02”, “2021-11-07”</span></span>
<span class="line"><span class="token comment">//错误例子：</span></span>
<span class="line"><span class="token comment">//“2006-01-02 15:04:05”, “2021-11-07”</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="map-切片-数组转-json-格式" tabindex="-1"><a class="header-anchor" href="#map-切片-数组转-json-格式"><span>map,切片,数组转 json 格式</span></a></h2>`,2),Mn={href:"https://blog.csdn.net/qq_36977923/article/details/124854677",target:"_blank",rel:"noopener noreferrer"},Bn={href:"https://www.zhihu.com/question/582442340/answer/2882892085",target:"_blank",rel:"noopener noreferrer"},Dn=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"> <span class="token comment">//map转json</span></span>
<span class="line"> mapData <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"> mapData<span class="token punctuation">[</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">18</span></span>
<span class="line"> mapData<span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;沉默小管&quot;</span></span>
<span class="line"> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>mapData<span class="token punctuation">)</span></span>
<span class="line"> bytes<span class="token punctuation">,</span><span class="token boolean">_</span> <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>mapData<span class="token punctuation">)</span></span>
<span class="line"> stringData <span class="token operator">:=</span> <span class="token function">string</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span></span>
<span class="line"> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>stringData<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"> <span class="token keyword">var</span> result <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"> <span class="token comment">// json转为map数据结构</span></span>
<span class="line"> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>stringData<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>result<span class="token punctuation">)</span></span>
<span class="line"> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span><span class="token string">&quot;--mapData&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line"><span class="token string">&quot;encoding/json&quot;</span></span>
<span class="line"><span class="token string">&quot;fmt&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">Name <span class="token builtin">string</span></span>
<span class="line">Age  <span class="token builtin">int</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">jsonData <span class="token operator">:=</span> <span class="token string">\`{&quot;Name&quot;: &quot;John&quot;, &quot;Age&quot;: 30}\`</span></span>
<span class="line"><span class="token keyword">var</span> person Person</span>
<span class="line">err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>person<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Error decoding JSON:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">return</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> person<span class="token punctuation">.</span>Age<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="go-语言-json-嵌套数组结构体用法" tabindex="-1"><a class="header-anchor" href="#go-语言-json-嵌套数组结构体用法"><span>go 语言 json 嵌套数组结构体用法</span></a></h2>`,2),zn={href:"https://blog.csdn.net/m0_38004619/article/details/99661474",target:"_blank",rel:"noopener noreferrer"},On=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"></span>
<span class="line"><span class="token keyword">type</span> Order <span class="token keyword">struct</span><span class="token punctuation">{</span></span>
<span class="line"> OrderId <span class="token builtin">string</span> <span class="token string">\`json:&quot;order_id&quot;\`</span></span>
<span class="line"> OrderPrice <span class="token builtin">float64</span> <span class="token string">\`json:&quot;order_price&quot;\`</span></span>
<span class="line"> Goods <span class="token punctuation">[</span><span class="token punctuation">]</span>Good <span class="token string">\`json:&quot;good&quot;\`</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> Good <span class="token keyword">struct</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"> GoodsName <span class="token builtin">string</span> <span class="token string">\`json:&quot;goods_name&quot;\`</span></span>
<span class="line"> GoodsPrice <span class="token builtin">float64</span> <span class="token string">\`json:&quot;goods_price&quot;\`</span></span>
<span class="line"> GoodsColor <span class="token punctuation">[</span><span class="token punctuation">]</span>Color <span class="token string">\`json:&quot;Goods_color&quot;\`</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="golang-解析-json-对象时-time-类型解析异常的解决方法" tabindex="-1"><a class="header-anchor" href="#golang-解析-json-对象时-time-类型解析异常的解决方法"><span>Golang 解析 json 对象时 time 类型解析异常的解决方法</span></a></h2>`,2),Nn={href:"https://blog.csdn.net/ttbro/article/details/120045194",target:"_blank",rel:"noopener noreferrer"},Ln=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="配置文件-csv-与-yaml-读写" tabindex="-1"><a class="header-anchor" href="#配置文件-csv-与-yaml-读写"><span>配置文件(CSV 与 YAML）读写</span></a></h2>`,2),Un={href:"https://blog.csdn.net/alwaysrun/article/details/128055427",target:"_blank",rel:"noopener noreferrer"},Vn=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="如何扩展-go-yaml-以支持自定义标签" tabindex="-1"><a class="header-anchor" href="#如何扩展-go-yaml-以支持自定义标签"><span>如何扩展 go-yaml 以支持自定义标签</span></a></h2>`,2),Wn={href:"https://cloud.tencent.com/developer/ask/sof/804191",target:"_blank",rel:"noopener noreferrer"},Yn=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="yaml-格式" tabindex="-1"><a class="header-anchor" href="#yaml-格式"><span>YAML 格式</span></a></h2>`,2),In={href:"https://www.jianshu.com/p/2a777cbf0dfe",target:"_blank",rel:"noopener noreferrer"},Xn={href:"https://blog.csdn.net/youngzil/article/details/125212861",target:"_blank",rel:"noopener noreferrer"},Jn=l(`<div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token comment">#ISO 8601日期格式如下：</span></span>
<span class="line">YYYY<span class="token punctuation">-</span>MM<span class="token punctuation">-</span>DDThh<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss<span class="token punctuation">[</span>.mmm<span class="token punctuation">]</span>TZD</span>
<span class="line"><span class="token comment">#其中：</span></span>
<span class="line"><span class="token comment">#YYYY表示四位数的年份</span></span>
<span class="line"><span class="token comment">#MM表示两位数的月份</span></span>
<span class="line"><span class="token comment">#DD表示两位数的天(day of the month)，从01到31</span></span>
<span class="line"><span class="token comment">#T是用来指示时间元素的开始字符</span></span>
<span class="line"><span class="token comment">#hh表示两位数的小时，从00到23，不包括AM/PM</span></span>
<span class="line"><span class="token comment">#mm表示两位数的分钟，从00到59</span></span>
<span class="line"><span class="token comment">#ss表示两位数的秒，从00到59</span></span>
<span class="line"><span class="token comment">#mmm表示三位数的毫秒数，从000到999</span></span>
<span class="line"><span class="token comment">#TZD表示时区指示符：Z或+hh:mm或-hh:mm，+或-表示时区距离UTC(世界标准时间)时区多远。例如：</span></span>
<span class="line"><span class="token comment">#CST(中国标准时间)：UTC +08:00，EST(东部标准时间)：UTC -05:00，CST(中部标准时间)：UTC -06:00。</span></span>
<span class="line">2012<span class="token punctuation">-</span>03<span class="token punctuation">-</span>29T10<span class="token punctuation">:</span>05<span class="token punctuation">:</span>45<span class="token punctuation">-</span><span class="token datetime number">06:00</span></span>
<span class="line"><span class="token comment">#表示：中部标准时间2012年3月29日10:05:45。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="go-泛型使用方法" tabindex="-1"><a class="header-anchor" href="#go-泛型使用方法"><span>go 泛型使用方法</span></a></h2>`,2),Hn={href:"https://blog.csdn.net/qq_42062052/article/details/123840525",target:"_blank",rel:"noopener noreferrer"},Zn={href:"https://www.jb51.net/article/252009.htm",target:"_blank",rel:"noopener noreferrer"},Kn=l(`<blockquote><p>需要 go 版本大于等于 1.18 泛型生命周期只在编译期，旨在为程序员生成代码，减少重复代码的编写 内置的泛型类型 any 和 comparable： any: 表示 go 里面所有的内置基本类型，等价于 interface{} comparable: 表示 go 里面所有内置的可比较类型：int、uint、float、bool、struct、指针等一切可以比较的类型</p></blockquote><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token comment">//在比较两个数的大小时，没有泛型的时候，仅仅只是传入类型不一样，我们就要再写一份一模一样的函数，如果有了泛型就可以减少这类代码</span></span>
<span class="line"><span class="token comment">// int</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">GetMaxNumInt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">if</span> a <span class="token operator">&gt;</span> b <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">return</span> a</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">return</span> b</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// int8</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">GetMaxNumInt8</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int8</span><span class="token punctuation">)</span> <span class="token builtin">int8</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">if</span> a <span class="token operator">&gt;</span> b <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">return</span> a</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">return</span> b</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//只需要在函数后用中括号声明T可能出现的类型，中间用符号&quot;|&quot; 分隔</span></span>
<span class="line"><span class="token comment">// 使用泛型</span></span>
<span class="line"><span class="token keyword">func</span> GetMaxNum<span class="token punctuation">[</span>T <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">int8</span><span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b T<span class="token punctuation">)</span> T <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> a <span class="token operator">&gt;</span> b <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> a</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> b</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="golang-程序-将一个元素追加到一个数组中" tabindex="-1"><a class="header-anchor" href="#golang-程序-将一个元素追加到一个数组中"><span>Golang 程序 将一个元素追加到一个数组中</span></a></h2>`,3),Qn={href:"https://geek-docs.com/go-tutorials/go-articles/golang-program-to-append-an-element-into-an-array.html",target:"_blank",rel:"noopener noreferrer"},$n={href:"https://blog.csdn.net/weixin_45728126/article/details/125708465",target:"_blank",rel:"noopener noreferrer"},ns=n("h2",{id:"【gorm】使用-gorm-连接各种数据库-2022",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#【gorm】使用-gorm-连接各种数据库-2022"},[n("span",null,"【GORM】使用 GORM 连接各种数据库（2022）")])],-1),ss={href:"https://blog.csdn.net/Gherbirthday0916/article/details/125024161",target:"_blank",rel:"noopener noreferrer"},as=n("h2",{id:"golang-使用-github-托管-go-类库",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#golang-使用-github-托管-go-类库"},[n("span",null,"Golang 使用 github 托管 go 类库")])],-1),es={href:"https://www.zhihu.com/tardis/sogou/art/354147069",target:"_blank",rel:"noopener noreferrer"},ls=n("h2",{id:"golang-管理-go-类库版本-包及版本管理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#golang-管理-go-类库版本-包及版本管理"},[n("span",null,"Golang 管理 go 类库版本 包及版本管理")])],-1),ts={href:"https://www.zhihu.com/tardis/sogou/art/355318345",target:"_blank",rel:"noopener noreferrer"},ps={href:"https://blog.csdn.net/lyp256/article/details/115078745",target:"_blank",rel:"noopener noreferrer"},is={href:"https://www.zhihu.com/tardis/sogou/art/354147069",target:"_blank",rel:"noopener noreferrer"},os=n("h2",{id:"go-私有模块管理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#go-私有模块管理"},[n("span",null,"go 私有模块管理")])],-1),cs={href:"https://blog.csdn.net/lyp256/article/details/115078745",target:"_blank",rel:"noopener noreferrer"},us=n("h2",{id:"如何解决-get-请求-url-参数中有-、空格、-、-、-、-等特殊符号的问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#如何解决-get-请求-url-参数中有-、空格、-、-、-、-等特殊符号的问题"},[n("span",null,"如何解决 get 请求 url 参数中有+、空格、=、%、&、#等特殊符号的问题")])],-1),rs={href:"https://lyzmz.blog.csdn.net/article/details/127347919",target:"_blank",rel:"noopener noreferrer"},ds=l(`<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">用其它字符替代吧,或用全角的。</span>
<span class="line">| 符号  |             说明             | 全角  |</span>
<span class="line">| :---: | :--------------------------: | :---: |</span>
<span class="line">| 空格  | URL中的空格可以用+号或者编码 |  %20  |</span>
<span class="line">|   +   |       URL中+号表示空格       |  %2B  |</span>
<span class="line">|   /   |       分隔目录和子目录       |  %2F  |</span>
<span class="line">|   ?   |     分隔实际的URL和参数      |  %3F  |</span>
<span class="line">|   %   |         指定特殊字符         |  %25  |</span>
<span class="line">|   #   |           表示书签           |  %23  |</span>
<span class="line">|   &amp;   |  URL中指定的参数间的分隔符Q  |  %26  |</span>
<span class="line">|   =   |      URL中指定参数的值       |  %3D  |</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用-go-module-时-go-get-更新依赖包的方法记录" tabindex="-1"><a class="header-anchor" href="#使用-go-module-时-go-get-更新依赖包的方法记录"><span>使用 Go Module 时 go get 更新依赖包的方法记录</span></a></h2>`,2),ks={href:"https://www.jianshu.com/p/84d4c4358710",target:"_blank",rel:"noopener noreferrer"},ms=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">go get <span class="token parameter variable">-u</span></span>
<span class="line">go mod tidy</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="go-语言获取文件的文件路径、文件名、扩展名" tabindex="-1"><a class="header-anchor" href="#go-语言获取文件的文件路径、文件名、扩展名"><span>Go 语言获取文件的文件路径、文件名、扩展名</span></a></h2>`,2),vs={href:"https://blog.csdn.net/u012183747/article/details/73666363",target:"_blank",rel:"noopener noreferrer"},gs=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line"><span class="token string">&quot;fmt&quot;</span></span>
<span class="line"><span class="token string">&quot;os&quot;</span></span>
<span class="line"><span class="token string">&quot;path/filepath&quot;</span></span>
<span class="line"><span class="token string">&quot;path&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line">files <span class="token operator">:=</span> <span class="token string">&quot;E:\\\\data\\\\test.txt&quot;</span></span>
<span class="line">paths<span class="token punctuation">,</span> fileName <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>paths<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span> <span class="token comment">//获取路径中的目录及文件名 E:\\data\\  test.txt</span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>filepath<span class="token punctuation">.</span><span class="token function">Base</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//获取路径中的文件名test.txt</span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">Ext</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//获取路径中的文件的后缀 .txt</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="跨平台-gui" tabindex="-1"><a class="header-anchor" href="#跨平台-gui"><span>跨平台 gui</span></a></h2>`,2),bs={href:"https://www.cnblogs.com/jiftle/p/15315488.html",target:"_blank",rel:"noopener noreferrer"};function hs(fs,_s){const a=p("ExternalLinkIcon");return i(),o("div",null,[u,n("ul",null,[n("li",null,[s("参考： "),n("a",r,[s("http://docs.iris.elevue.easygoadmin.vip/#/started?id=backend"),e(a)])])]),d,n("ul",null,[n("li",null,[n("a",k,[s("https://blog.csdn.net/Meyerheim1/article/details/121530390"),e(a)])])]),m,n("ul",null,[n("li",null,[n("a",v,[s("https://www.runoob.com/go/go-functions.html"),e(a)])]),n("li",null,[n("a",g,[s("http://c.biancheng.net/view/124.html"),e(a)])]),n("li",null,[n("a",b,[s("https://haicoder.net/golang/golang-string-contains.html"),e(a)])])]),h,n("ul",null,[n("li",null,[n("a",f,[s("https://blog.csdn.net/HYZX_9987/article/details/100072442"),e(a)])])]),_,n("ul",null,[n("li",null,[n("a",w,[s("https://www.jb51.net/article/211509.htm"),e(a)])])]),y,n("ul",null,[n("li",null,[n("a",q,[s("https://blog.csdn.net/eight_eyes/article/details/117695853"),e(a)])])]),x,n("ul",null,[n("li",null,[n("a",P,[s("https://blog.csdn.net/mrxuri/article/details/53842834"),e(a)])]),n("li",null,[n("a",j,[s("https://www.jb51.net/article/264269.htm"),e(a)])])]),R,n("ul",null,[n("li",null,[n("a",S,[s("https://blog.csdn.net/weixin_48536164/article/details/126760855"),e(a)])])]),G,n("ul",null,[n("li",null,[n("a",C,[s("https://blog.csdn.net/wangming520liwei/article/details/122136288"),e(a)])])]),T,n("ul",null,[n("li",null,[n("a",A,[s("https://blog.csdn.net/m0_37684037/article/details/106243897"),e(a)])])]),E,n("ul",null,[n("li",null,[n("a",F,[s("https://blog.csdn.net/raoxiaoya/article/details/117998066"),e(a)])]),n("li",null,[n("a",M,[s("https://www.jb51.net/article/262878.htm"),e(a)])]),n("li",null,[n("a",B,[s("https://www.cnblogs.com/ljymoonlight/p/15820236.html"),e(a)])])]),D,n("ul",null,[n("li",null,[n("a",z,[s("https://blog.csdn.net/wujiangwei567/article/details/86593396"),e(a)])]),n("li",null,[n("a",O,[s("https://www.jb51.net/article/181664.htm"),e(a)])]),n("li",null,[n("a",N,[s("https://c.runoob.com/front-end/854/"),e(a)])])]),L,n("ul",null,[n("li",null,[n("a",U,[s("https://www.runoob.com/go/go-error-handling.html"),e(a)])]),n("li",null,[n("a",V,[s("https://blog.csdn.net/hefrankeleyn/article/details/126415972"),e(a)])])]),W,n("ul",null,[n("li",null,[n("a",Y,[s("https://www.cnblogs.com/zhaoyingjie/p/15702174.html"),e(a)])])]),I,n("ul",null,[n("li",null,[n("a",X,[s("https://www.shuzhiduo.com/A/rV57RaeXJP/"),e(a)])])]),J,n("ul",null,[n("li",null,[n("a",H,[s("https://zhuanlan.zhihu.com/p/393998886"),e(a)])]),n("li",null,[n("a",Z,[s("https://blog.csdn.net/arv002/article/details/116029758"),e(a)])]),n("li",null,[n("a",K,[s("https://www.mianshigee.com/question/127883drr/"),e(a)]),s(" JSON 文件")]),n("li",null,[n("a",Q,[s("https://blog.csdn.net/weixin_41670928/article/details/122569045"),e(a)])]),n("li",null,[n("a",$,[s("https://blog.csdn.net/weixin_44328568/article/details/120517480"),e(a)])])]),nn,n("ul",null,[n("li",null,[n("a",sn,[s("https://blog.csdn.net/whatday/article/details/109278821"),e(a)])])]),an,n("ul",null,[n("li",null,[n("a",en,[s("https://blog.csdn.net/HYZX_9987/article/details/100072442"),e(a)])])]),ln,n("ul",null,[n("li",null,[n("a",tn,[s("https://www.cnblogs.com/ksir16/p/9050721.html"),e(a)])]),n("li",null,[n("a",pn,[s("https://www.xhyonline.com/?p=1182"),e(a)])])]),on,n("ul",null,[n("li",null,[n("a",cn,[s("https://www.cnblogs.com/zxqblogrecord/p/13303212.html"),e(a)])])]),un,n("ul",null,[n("li",null,[n("a",rn,[s("https://blog.csdn.net/qq_46284579/article/details/121367133"),e(a)])])]),dn,n("ul",null,[n("li",null,[n("a",kn,[s("https://blog.csdn.net/qq_46284579/article/details/121367133"),e(a)])])]),mn,n("ul",null,[n("li",null,[n("a",vn,[s("https://www.sunzhongwei.com/go-test-suggests-no-test-files"),e(a)])])]),gn,n("ul",null,[n("li",null,[n("a",bn,[s("https://www.topgoer.com/"),e(a)])])]),hn,n("ul",null,[n("li",null,[n("a",fn,[s("https://blog.csdn.net/inthat/article/details/123727180"),e(a)])])]),_n,n("ul",null,[n("li",null,[n("a",wn,[s("https://zhuanlan.zhihu.com/p/429647200"),e(a)])]),n("li",null,[n("a",yn,[s("https://blog.csdn.net/Gherbirthday0916/article/details/124796907"),e(a)])])]),qn,n("ul",null,[n("li",null,[n("a",xn,[s("http://www.manongjc.com/detail/26-mcscpivbfmypgug.html"),e(a)])])]),Pn,n("ul",null,[n("li",null,[n("a",jn,[s("https://blog.csdn.net/begefefsef/article/details/126663175"),e(a)])])]),Rn,n("ul",null,[n("li",null,[n("a",Sn,[s("https://blog.csdn.net/liulanba/article/details/128781269"),e(a)])])]),Gn,n("ul",null,[n("li",null,[n("a",Cn,[s("http://www.manongjc.com/detail/63-mkweyxulayhwydm.html"),e(a)])]),n("li",null,[n("a",Tn,[s("https://blog.csdn.net/yuezhilangniao/article/details/122763144"),e(a)])]),n("li",null,[n("a",An,[s("https://blog.csdn.net/z_xiaocun/article/details/46934223"),e(a)])]),n("li",null,[n("a",En,[s("https://blog.csdn.net/qq_42303254/article/details/117637436"),e(a)])])]),Fn,n("ul",null,[n("li",null,[n("a",Mn,[s("https://blog.csdn.net/qq_36977923/article/details/124854677"),e(a)])]),n("li",null,[n("a",Bn,[s("https://www.zhihu.com/question/582442340/answer/2882892085"),e(a)])])]),Dn,n("ul",null,[n("li",null,[n("a",zn,[s("https://blog.csdn.net/m0_38004619/article/details/99661474"),e(a)])])]),On,n("ul",null,[n("li",null,[n("a",Nn,[s("https://blog.csdn.net/ttbro/article/details/120045194"),e(a)])])]),Ln,n("ul",null,[n("li",null,[n("a",Un,[s("https://blog.csdn.net/alwaysrun/article/details/128055427"),e(a)])])]),Vn,n("ul",null,[n("li",null,[n("a",Wn,[s("https://cloud.tencent.com/developer/ask/sof/804191"),e(a)])])]),Yn,n("ul",null,[n("li",null,[n("a",In,[s("https://www.jianshu.com/p/2a777cbf0dfe"),e(a)])]),n("li",null,[n("a",Xn,[s("https://blog.csdn.net/youngzil/article/details/125212861"),e(a)])])]),Jn,n("ul",null,[n("li",null,[n("a",Hn,[s("https://blog.csdn.net/qq_42062052/article/details/123840525"),e(a)])]),n("li",null,[n("a",Zn,[s("https://www.jb51.net/article/252009.htm"),e(a)])])]),Kn,n("ul",null,[n("li",null,[n("a",Qn,[s("https://geek-docs.com/go-tutorials/go-articles/golang-program-to-append-an-element-into-an-array.html"),e(a)])]),n("li",null,[n("a",$n,[s("https://blog.csdn.net/weixin_45728126/article/details/125708465"),e(a)])])]),ns,n("ul",null,[n("li",null,[n("a",ss,[s("https://blog.csdn.net/Gherbirthday0916/article/details/125024161"),e(a)])])]),as,n("ul",null,[n("li",null,[n("a",es,[s("https://www.zhihu.com/tardis/sogou/art/354147069"),e(a)])])]),ls,n("ul",null,[n("li",null,[n("a",ts,[s("https://www.zhihu.com/tardis/sogou/art/355318345"),e(a)])]),n("li",null,[n("a",ps,[s("https://blog.csdn.net/lyp256/article/details/115078745"),e(a)])]),n("li",null,[n("a",is,[s("https://www.zhihu.com/tardis/sogou/art/354147069"),e(a)])])]),os,n("ul",null,[n("li",null,[n("a",cs,[s("https://blog.csdn.net/lyp256/article/details/115078745"),e(a)])])]),us,n("ul",null,[n("li",null,[n("a",rs,[s("https://lyzmz.blog.csdn.net/article/details/127347919"),e(a)])])]),ds,n("ul",null,[n("li",null,[n("a",ks,[s("https://www.jianshu.com/p/84d4c4358710"),e(a)])])]),ms,n("ul",null,[n("li",null,[n("a",vs,[s("https://blog.csdn.net/u012183747/article/details/73666363"),e(a)])])]),gs,n("blockquote",null,[n("p",null,[n("a",bs,[s("https://www.cnblogs.com/jiftle/p/15315488.html"),e(a)])])])])}const ys=t(c,[["render",hs],["__file","Gokaifacankao.html.vue"]]),qs=JSON.parse('{"path":"/blogs/developer/go/Gokaifacankao.html","title":"Go开发参考","lang":"zh-CN","frontmatter":{"title":"Go开发参考","date":"2023-03-02T00:00:00.000Z","tags":["开发参考"],"categories":["Go"]},"headers":[{"level":2,"title":"go mod 使用方法","slug":"go-mod-使用方法","link":"#go-mod-使用方法","children":[]},{"level":2,"title":"Golang Cobra Command 详解（三）","slug":"golang-cobra-command-详解-三","link":"#golang-cobra-command-详解-三","children":[]},{"level":2,"title":"mysql 操作","slug":"mysql-操作","link":"#mysql-操作","children":[]},{"level":2,"title":"GoLang 使用文档","slug":"golang-使用文档","link":"#golang-使用文档","children":[]},{"level":2,"title":"扫描文件夹","slug":"扫描文件夹","link":"#扫描文件夹","children":[]},{"level":2,"title":"Go 语言获取文件的名称、前缀、后缀","slug":"go-语言获取文件的名称、前缀、后缀","link":"#go-语言获取文件的名称、前缀、后缀","children":[]},{"level":2,"title":"golang 字符串转大小写","slug":"golang-字符串转大小写","link":"#golang-字符串转大小写","children":[]},{"level":2,"title":"Go 语言读写 Excel","slug":"go-语言读写-excel","link":"#go-语言读写-excel","children":[]},{"level":2,"title":"go 获取当前时间，以及时间格式转换","slug":"go-获取当前时间-以及时间格式转换","link":"#go-获取当前时间-以及时间格式转换","children":[]},{"level":2,"title":"Go 局部变量&全局变量","slug":"go-局部变量-全局变量","link":"#go-局部变量-全局变量","children":[]},{"level":2,"title":"go 判断字符串里是否包含子字符串 支持费操作","slug":"go-判断字符串里是否包含子字符串-支持费操作","link":"#go-判断字符串里是否包含子字符串-支持费操作","children":[]},{"level":2,"title":"golang 读取文件，按行读取，写入文件","slug":"golang-读取文件-按行读取-写入文件","link":"#golang-读取文件-按行读取-写入文件","children":[]},{"level":2,"title":"go 语言中常用的功能之四（正则匹配）","slug":"go-语言中常用的功能之四-正则匹配","link":"#go-语言中常用的功能之四-正则匹配","children":[]},{"level":2,"title":"GO 简单入门：返回和处理一个错误","slug":"go-简单入门-返回和处理一个错误","link":"#go-简单入门-返回和处理一个错误","children":[]},{"level":2,"title":"golang go 中字符串和各种 int 类型之间的相互转换方式","slug":"golang-go-中字符串和各种-int-类型之间的相互转换方式","link":"#golang-go-中字符串和各种-int-类型之间的相互转换方式","children":[]},{"level":2,"title":"添加可执行文件图标","slug":"添加可执行文件图标","link":"#添加可执行文件图标","children":[]},{"level":2,"title":"Go 语言 JSON","slug":"go-语言-json","link":"#go-语言-json","children":[]},{"level":2,"title":"golang 字符串 去首尾字符","slug":"golang-字符串-去首尾字符","link":"#golang-字符串-去首尾字符","children":[]},{"level":2,"title":"判断子串","slug":"判断子串","link":"#判断子串","children":[]},{"level":2,"title":"条件编译","slug":"条件编译","link":"#条件编译","children":[]},{"level":2,"title":"go 字符串切割方法小结","slug":"go-字符串切割方法小结","link":"#go-字符串切割方法小结","children":[]},{"level":2,"title":"Go 语言测试","slug":"go-语言测试","link":"#go-语言测试","children":[{"level":3,"title":"基准测试","slug":"基准测试","link":"#基准测试","children":[]},{"level":3,"title":"性能比较函数","slug":"性能比较函数","link":"#性能比较函数","children":[]},{"level":3,"title":"重置时间","slug":"重置时间","link":"#重置时间","children":[]},{"level":3,"title":"并行测试","slug":"并行测试","link":"#并行测试","children":[]},{"level":3,"title":"Setup 与 TearDown","slug":"setup-与-teardown","link":"#setup-与-teardown","children":[]},{"level":3,"title":"示例函数","slug":"示例函数","link":"#示例函数","children":[]}]},{"level":2,"title":"go test 提示 no test files","slug":"go-test-提示-no-test-files","link":"#go-test-提示-no-test-files","children":[]},{"level":2,"title":"go 语言主流开发框架参考","slug":"go-语言主流开发框架参考","link":"#go-语言主流开发框架参考","children":[]},{"level":2,"title":"go 语言递归创建目录","slug":"go-语言递归创建目录","link":"#go-语言递归创建目录","children":[]},{"level":2,"title":"Gin 模板","slug":"gin-模板","link":"#gin-模板","children":[]},{"level":2,"title":"golang 中结构体当做函数参数或函数返回值都会被拷贝","slug":"golang-中结构体当做函数参数或函数返回值都会被拷贝","link":"#golang-中结构体当做函数参数或函数返回值都会被拷贝","children":[]},{"level":2,"title":"golang 里面关于 map[string]interface{}取值问题","slug":"golang-里面关于-map-string-interface-取值问题","link":"#golang-里面关于-map-string-interface-取值问题","children":[]},{"level":2,"title":"go 获取数据类型和类型转换","slug":"go-获取数据类型和类型转换","link":"#go-获取数据类型和类型转换","children":[]},{"level":2,"title":"golang 字符串 转 时间类型","slug":"golang-字符串-转-时间类型","link":"#golang-字符串-转-时间类型","children":[]},{"level":2,"title":"map,切片,数组转 json 格式","slug":"map-切片-数组转-json-格式","link":"#map-切片-数组转-json-格式","children":[]},{"level":2,"title":"go 语言 json 嵌套数组结构体用法","slug":"go-语言-json-嵌套数组结构体用法","link":"#go-语言-json-嵌套数组结构体用法","children":[]},{"level":2,"title":"Golang 解析 json 对象时 time 类型解析异常的解决方法","slug":"golang-解析-json-对象时-time-类型解析异常的解决方法","link":"#golang-解析-json-对象时-time-类型解析异常的解决方法","children":[]},{"level":2,"title":"配置文件(CSV 与 YAML）读写","slug":"配置文件-csv-与-yaml-读写","link":"#配置文件-csv-与-yaml-读写","children":[]},{"level":2,"title":"如何扩展 go-yaml 以支持自定义标签","slug":"如何扩展-go-yaml-以支持自定义标签","link":"#如何扩展-go-yaml-以支持自定义标签","children":[]},{"level":2,"title":"YAML 格式","slug":"yaml-格式","link":"#yaml-格式","children":[]},{"level":2,"title":"go 泛型使用方法","slug":"go-泛型使用方法","link":"#go-泛型使用方法","children":[]},{"level":2,"title":"Golang 程序 将一个元素追加到一个数组中","slug":"golang-程序-将一个元素追加到一个数组中","link":"#golang-程序-将一个元素追加到一个数组中","children":[]},{"level":2,"title":"【GORM】使用 GORM 连接各种数据库（2022）","slug":"【gorm】使用-gorm-连接各种数据库-2022","link":"#【gorm】使用-gorm-连接各种数据库-2022","children":[]},{"level":2,"title":"Golang 使用 github 托管 go 类库","slug":"golang-使用-github-托管-go-类库","link":"#golang-使用-github-托管-go-类库","children":[]},{"level":2,"title":"Golang 管理 go 类库版本 包及版本管理","slug":"golang-管理-go-类库版本-包及版本管理","link":"#golang-管理-go-类库版本-包及版本管理","children":[]},{"level":2,"title":"go 私有模块管理","slug":"go-私有模块管理","link":"#go-私有模块管理","children":[]},{"level":2,"title":"如何解决 get 请求 url 参数中有+、空格、=、%、&、#等特殊符号的问题","slug":"如何解决-get-请求-url-参数中有-、空格、-、-、-、-等特殊符号的问题","link":"#如何解决-get-请求-url-参数中有-、空格、-、-、-、-等特殊符号的问题","children":[]},{"level":2,"title":"使用 Go Module 时 go get 更新依赖包的方法记录","slug":"使用-go-module-时-go-get-更新依赖包的方法记录","link":"#使用-go-module-时-go-get-更新依赖包的方法记录","children":[]},{"level":2,"title":"Go 语言获取文件的文件路径、文件名、扩展名","slug":"go-语言获取文件的文件路径、文件名、扩展名","link":"#go-语言获取文件的文件路径、文件名、扩展名","children":[]},{"level":2,"title":"跨平台 gui","slug":"跨平台-gui","link":"#跨平台-gui","children":[]}],"git":{"createdTime":1732772000000,"updatedTime":1744078224000,"contributors":[{"name":"ReWi","email":"RejoiceWindow@yeah.net","commits":3},{"name":"ReWi","email":"RejoiceWindow@yeah.com","commits":2}]},"filePathRelative":"blogs/developer/go/Go开发参考.md"}');export{ys as comp,qs as data};
