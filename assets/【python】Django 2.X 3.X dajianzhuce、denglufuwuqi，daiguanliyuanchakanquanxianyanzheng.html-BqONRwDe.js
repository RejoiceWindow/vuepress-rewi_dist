import{_ as p,r as t,o as l,c as o,b as s,d as n,e,a as c}from"./app-De5JuplM.js";const i={},u=s("p",null,"@[TOC](【python】Django 2.X 3.X 搭建注册、登录服务器，带管理员查看权限验证)",-1),r=s("h1",{id:"开始搭建",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#开始搭建"},[s("span",null,"开始搭建")])],-1),k={href:"https://www.django.cn/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://code.djangoproject.com/",target:"_blank",rel:"noopener noreferrer"},m=c(`<ol><li>数据模型</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment">#AppServer/models.py</span></span>
<span class="line"><span class="token comment">#AppServer为自己创建的APP名字</span></span>
<span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models</span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">u_name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> verbose_name<span class="token operator">=</span><span class="token string">&#39;姓名&#39;</span><span class="token punctuation">)</span></span>
<span class="line">u_phone<span class="token operator">=</span>models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span>unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>verbose_name<span class="token operator">=</span><span class="token string">&#39;手机号&#39;</span><span class="token punctuation">)</span></span>
<span class="line">u_password <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">78</span><span class="token punctuation">,</span>verbose_name<span class="token operator">=</span><span class="token string">&#39;密码&#39;</span><span class="token punctuation">)</span></span>
<span class="line">u_admin <span class="token operator">=</span> models<span class="token punctuation">.</span>BooleanField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>verbose_name<span class="token operator">=</span><span class="token string">&#39;是否admin&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>路由</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment">#AppServer/urls.py</span></span>
<span class="line"><span class="token comment">#AppServer为自己创建的APP名字</span></span>
<span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path</span>
<span class="line"><span class="token keyword">from</span> AppServer <span class="token keyword">import</span> views</span>
<span class="line">urlpatterns<span class="token operator">=</span><span class="token punctuation">[</span></span>
<span class="line">path<span class="token punctuation">(</span><span class="token string">r&#39;users/&#39;</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>UsersAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">path<span class="token punctuation">(</span><span class="token string">r&#39;users/&lt;int:pk&gt;/&#39;</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>UserAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">&#39;user-detail&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>视图</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment">#AppServer/views.py</span></span>
<span class="line"><span class="token comment">#AppServer为自己创建的APP名字</span></span>
<span class="line"><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>generics <span class="token keyword">import</span> ListCreateAPIView<span class="token punctuation">,</span> RetrieveUpdateAPIView</span>
<span class="line"><span class="token keyword">from</span> AppServer<span class="token punctuation">.</span>user<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> UserSerializer</span>
<span class="line"><span class="token keyword">from</span> AppServer<span class="token punctuation">.</span>models <span class="token keyword">import</span> User</span>
<span class="line"><span class="token keyword">from</span> AppServer<span class="token punctuation">.</span>user<span class="token punctuation">.</span>auth <span class="token keyword">import</span> LoginAuthentication<span class="token punctuation">,</span>LoginPermissions</span>
<span class="line"><span class="token keyword">from</span> AppServer<span class="token punctuation">.</span>user<span class="token punctuation">.</span>permissions <span class="token keyword">import</span>  IsAdminUser</span>
<span class="line"></span>
<span class="line">SUPER_USERS<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">&#39;怿窗&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;admin&#39;</span><span class="token punctuation">)</span>  <span class="token comment">#当用户名为里面之一时，自动设置为超级用户(admin)</span></span>
<span class="line">HTTP_ACTION_LOGIN<span class="token operator">=</span><span class="token string">&quot;login&quot;</span></span>
<span class="line">HTTP_ACTION_REGISTER<span class="token operator">=</span><span class="token string">&quot;register&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">UsersAPIView</span><span class="token punctuation">(</span>ListCreateAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 序列化类</span></span>
<span class="line">    serializer_class <span class="token operator">=</span> UserSerializer</span>
<span class="line">    <span class="token comment"># 查询集和结果集</span></span>
<span class="line">    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># 添加地址前需要进行用户认证</span></span>
<span class="line">    authentication_classes <span class="token operator">=</span> <span class="token punctuation">(</span>LoginAuthentication<span class="token punctuation">,</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># 权限控制</span></span>
<span class="line">    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>IsAdminUser<span class="token punctuation">,</span><span class="token punctuation">)</span></span>
<span class="line">     <span class="token comment"># 同一个post做把登录和注册同时完成</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        action<span class="token operator">=</span>request<span class="token punctuation">.</span>query_params<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;action&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment"># 若参数为register则为注册，创建用户</span></span>
<span class="line">        <span class="token keyword">if</span> action<span class="token operator">==</span>HTTP_ACTION_REGISTER<span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">return</span> self<span class="token punctuation">.</span>create<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">elif</span> action<span class="token operator">==</span>HTTP_ACTION_LOGIN<span class="token punctuation">:</span></span>
<span class="line">            <span class="token comment"># 验证手机号密码</span></span>
<span class="line">            u_phone<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;u_phone&#39;</span><span class="token punctuation">)</span></span>
<span class="line">            u_password<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;u_password&#39;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment"># print(u_phone,u_password)</span></span>
<span class="line">            <span class="token keyword">try</span><span class="token punctuation">:</span></span>
<span class="line">                user<span class="token operator">=</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>u_phone<span class="token operator">=</span>u_phone<span class="token punctuation">)</span>  <span class="token comment"># 数据库验证用户</span></span>
<span class="line">                <span class="token comment"># 用户名存在验证密码</span></span>
<span class="line">                <span class="token keyword">if</span> user<span class="token punctuation">.</span>u_password<span class="token operator">==</span>u_password<span class="token punctuation">:</span>  <span class="token comment">#明文密码，可自行百度django自带的加密方法</span></span>
<span class="line">                    <span class="token comment"># 生成令牌,传入客户端和放入服务器缓存或者数据库</span></span>
<span class="line">                    token<span class="token operator">=</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span></span>
<span class="line">                    <span class="token comment"># 把token放入缓存,注意Redis在settings中的配置</span></span>
<span class="line">                    cache<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token comment">#\`使用缓存表，需要按照官网的的配置在Settings.py设置\`</span></span>
<span class="line">                    <span class="token comment"># 并传入客户端</span></span>
<span class="line">                    data<span class="token operator">=</span><span class="token punctuation">{</span></span>
<span class="line">                        <span class="token string">&#39;msg&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;login success&#39;</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token string">&#39;user_id&#39;</span><span class="token punctuation">:</span> user<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token string">&#39;status&#39;</span><span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token string">&#39;token&#39;</span><span class="token punctuation">:</span>token</span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                    <span class="token keyword">return</span> Response<span class="token punctuation">(</span>data<span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">                    <span class="token keyword">raise</span> exceptions<span class="token punctuation">.</span>AuthenticationFailed    <span class="token comment"># 用户密码错误</span></span>
<span class="line">            <span class="token keyword">except</span> User<span class="token punctuation">.</span>DoesNotExist<span class="token punctuation">:</span></span>
<span class="line">                <span class="token comment"># raise exceptions.NotFound   # 手机号错误</span></span>
<span class="line">                <span class="token keyword">raise</span> exceptions<span class="token punctuation">.</span>AuthenticationFailed  <span class="token comment"># 用户名错误</span></span>
<span class="line">        <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token comment"># raise exceptions.ValidationError   # 验证错误，传入的不是POST请求</span></span>
<span class="line">            <span class="token keyword">raise</span> exceptions<span class="token punctuation">.</span>ParseError  <span class="token comment"># 既不是登录也不是注册</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># 创建用户</span></span>
<span class="line">    <span class="token comment"># 重写的CreateModelMixin中的方法：用于用户的创建</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">)</span></span>
<span class="line">        serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line">        self<span class="token punctuation">.</span>perform_create<span class="token punctuation">(</span>serializer<span class="token punctuation">)</span></span>
<span class="line">        data <span class="token operator">=</span> serializer<span class="token punctuation">.</span>data</span>
<span class="line">        u_name<span class="token operator">=</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;u_name&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment"># 判断是否是创建的超级用户</span></span>
<span class="line">        <span class="token keyword">if</span> u_name <span class="token keyword">in</span> SUPER_USERS<span class="token punctuation">:</span></span>
<span class="line">            <span class="token comment"># print(&quot;创建超级用户&quot;)</span></span>
<span class="line">            u_id<span class="token operator">=</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span></span>
<span class="line">            user<span class="token operator">=</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span>u_id<span class="token punctuation">)</span>  <span class="token comment"># 拿到对应的用户</span></span>
<span class="line">            user<span class="token punctuation">.</span>u_admin<span class="token operator">=</span><span class="token boolean">True</span>    <span class="token comment"># 设置为超级用户o0</span></span>
<span class="line">            user<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            data<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;u_admin&#39;</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment"># 创建了超级用户，在返回客户端的时候也把对应修改做了</span></span>
<span class="line">        headers <span class="token operator">=</span> self<span class="token punctuation">.</span>get_success_headers<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>data<span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_201_CREATED<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>用户认证</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment">#AppServer/user/auth.py</span></span>
<span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>cache <span class="token keyword">import</span> cache</span>
<span class="line"><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>authentication <span class="token keyword">import</span> BaseAuthentication</span>
<span class="line"><span class="token keyword">from</span> AppServer<span class="token punctuation">.</span>models <span class="token keyword">import</span> User</span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">LoginAuthentication</span><span class="token punctuation">(</span>BaseAuthentication<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 验证user及token</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">authenticate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token comment">#最好写成注释这样：</span></span>
<span class="line">         <span class="token comment"># 判断是否是get请求，其他请求直接可以访问</span></span>
<span class="line">        <span class="token comment"># if request.method == &#39;GET&#39;:</span></span>
<span class="line">        <span class="token comment"># 从请求地址栏获取token（query_params)</span></span>
<span class="line">        <span class="token comment">#t oken = request.META.get(&quot;HTTP_AUTHORIZATION&quot;)</span></span>
<span class="line">         <span class="token comment">#u_id = cache.get(token)</span></span>
<span class="line">         <span class="token comment">#user = User.objects.get(pk=u_id)</span></span>
<span class="line">         <span class="token comment"># return user, token</span></span>
<span class="line">        <span class="token keyword">try</span><span class="token punctuation">:</span></span>
<span class="line">            token <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;HTTP_AUTHORIZATION&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment"># print(token)</span></span>
<span class="line">            <span class="token comment"># token = request.query_params.get(&#39;token&#39;)</span></span>
<span class="line">            u_id <span class="token operator">=</span> cache<span class="token punctuation">.</span>get<span class="token punctuation">(</span>token<span class="token punctuation">)</span></span>
<span class="line">            user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span>u_id<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> user<span class="token punctuation">,</span> token</span>
<span class="line">        <span class="token keyword">except</span><span class="token punctuation">:</span>  <span class="token comment"># 若验证没成功返回None</span></span>
<span class="line">            <span class="token keyword">return</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>权限控制</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment">#AppServer/user/permissions</span></span>
<span class="line"><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> BasePermission</span>
<span class="line"><span class="token keyword">from</span> AppServer<span class="token punctuation">.</span>models <span class="token keyword">import</span> User</span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">IsAdminUser</span><span class="token punctuation">(</span>BasePermission<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">has_permission</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">if</span> request<span class="token punctuation">.</span>method<span class="token operator">==</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>user<span class="token punctuation">,</span>User<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">                <span class="token keyword">return</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>u_admin</span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">False</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">True</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">LoginPermissions</span><span class="token punctuation">(</span>BasePermission<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">has_permission</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token comment"># 验证用户是否在用户列表里</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>user<span class="token punctuation">,</span> User<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">True</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">False</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="使用-rest-framework-序列化数据返回" tabindex="-1"><a class="header-anchor" href="#使用-rest-framework-序列化数据返回"><span>使用 REST framework 序列化数据返回</span></a></h1><pre><code>* 相关说明，可参看[Django REST framework 中文教程](https://www.w3cschool.cn/lxraw/)
</code></pre><ol><li>序列化数据</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment">#AppServer/user/serializers.py</span></span>
<span class="line"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers</span>
<span class="line"><span class="token keyword">from</span> AppServer<span class="token punctuation">.</span>models <span class="token keyword">import</span> User</span>
<span class="line"><span class="token comment"># 用户表序列化</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">UserSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>HyperlinkedModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span></span>
<span class="line">        model<span class="token operator">=</span>User</span>
<span class="line">        fields<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;u_name&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;u_phone&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;u_password&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;u_admin&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>增加获取、更新单个用户数据的视图(直接加在文件后面) #AppServer/views.py #AppServer 为自己创建的 APP 名字</li></ul><h1 id="单个用户-可用于展示、更新" tabindex="-1"><a class="header-anchor" href="#单个用户-可用于展示、更新"><span>单个用户，可用于展示、更新</span></a></h1><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">UserAPIView</span><span class="token punctuation">(</span>RetrieveUpdateAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    serializer_class <span class="token operator">=</span> UserSerializer</span>
<span class="line">    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># 添加地址前需要进行用户认证</span></span>
<span class="line">    authentication_classes <span class="token operator">=</span> <span class="token punctuation">(</span>LoginAuthentication<span class="token punctuation">,</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># 权限控制</span></span>
<span class="line">    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>LoginPermissions<span class="token punctuation">,</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># 验证登录后只能获取当前用户的数据</span></span>
<span class="line">    <span class="token comment"># 判定用户数据只能是用户登录的用户数据，不能获取其他用户的用户数据</span></span>
<span class="line">    <span class="token comment"># RetrieveAPIView-&gt;get-&gt;retrieve</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">retrieve</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token comment"># instance = self.get_object()</span></span>
<span class="line">        <span class="token comment"># # 进行了数据库查询操作</span></span>
<span class="line">        <span class="token comment"># if instance.id != request.user.id:</span></span>
<span class="line">        <span class="token comment">#     raise exceptions.AuthenticationFailed   # 当前已登录用户的id和要获取值id不一致</span></span>
<span class="line">        <span class="token comment"># serializer = self.get_serializer(instance)</span></span>
<span class="line">        <span class="token comment"># return Response(serializer.data)</span></span>
<span class="line">        <span class="token comment"># 在路径中拿到id值</span></span>
<span class="line">        <span class="token keyword">if</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>u_admin<span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">pass</span></span>
<span class="line">        <span class="token keyword">elif</span> kwargs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;pk&#39;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">:</span>   <span class="token comment"># 也可在中间件中进行验证</span></span>
<span class="line">            <span class="token keyword">raise</span> exceptions<span class="token punctuation">.</span>AuthenticationFailed   <span class="token comment"># 当前已登录用户的id和要获取值id不一致</span></span>
<span class="line">        instance <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>instance<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">patch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">if</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>u_admin<span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">pass</span></span>
<span class="line">        <span class="token keyword">elif</span> kwargs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;pk&#39;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">:</span>  <span class="token comment"># 也可在中间件中进行验证</span></span>
<span class="line">            <span class="token keyword">raise</span> exceptions<span class="token punctuation">.</span>AuthenticationFailed  <span class="token comment"># 当前已登录用户的id和要获取值id不一致</span></span>
<span class="line">        <span class="token keyword">return</span> self<span class="token punctuation">.</span>partial_update<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="数据迁移-自动创建数据库" tabindex="-1"><a class="header-anchor" href="#数据迁移-自动创建数据库"><span>数据迁移，自动创建数据库</span></a></h1><ul><li>在控制台输入： <ul><li>生成迁移文件：python manage.py makemigrations</li><li>将迁移文入库中：python manage.py migrate</li><li>创建缓存表：python manage.py createcachetable my_cache_table</li><li>创建缓存表：注意在 settings.py 中要有配置</li><li>运行：python manage.py runserver</li><li><img src="https://img-blog.csdnimg.cn/8c09c5a6563f4454b6ef22790bbc56a2.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Jlam9pY2V3aW5kb3c=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul></li></ul><h1 id="使用-postman-软件测试" tabindex="-1"><a class="header-anchor" href="#使用-postman-软件测试"><span>使用 postman 软件测试</span></a></h1><ol><li>注册</li></ol><ul><li><img src="https://img-blog.csdnimg.cn/eda7facea6d140f09b443698752cbbe7.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Jlam9pY2V3aW5kb3c=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><ol start="2"><li>登录</li></ol><ul><li><img src="https://img-blog.csdnimg.cn/83b266e6620446a18f39236cd339d5ef.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Jlam9pY2V3aW5kb3c=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><ol start="3"><li>查看个人数据</li></ol><ul><li><p>将复制的 token 加入请求头</p></li><li><p><img src="https://img-blog.csdnimg.cn/de8a2df0a9374a2fbf7918595fe5f6ae.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Jlam9pY2V3aW5kb3c=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>回车，获取到数据</p></li><li><p><img src="https://img-blog.csdnimg.cn/43707739ba014e99934adc25947c1de0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Jlam9pY2V3aW5kb3c=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><ol start="4"><li>另外个 URL，自行验证</li></ol><ul><li>GET：~/appserver/users/ <ul><li>在数据库将 u_admin 改为 1，再试试</li></ul></li><li>patch：~/appserver/users/7/</li><li>GET：~/appserver/users/2/ <ul><li>得先注册个 id 为 2 的用户，用其他 id 用户的 token 去访问</li><li>将当前 token 的用户，在数据库将 u_admin 改为 1，再试试</li></ul></li></ul><h1 id="自己写-python-测试程序" tabindex="-1"><a class="header-anchor" href="#自己写-python-测试程序"><span>自己写 python 测试程序</span></a></h1>`,29),v={href:"https://blog.csdn.net/rejoicewindow/article/details/119791157",target:"_blank",rel:"noopener noreferrer"};function b(g,h){const a=t("ExternalLinkIcon");return l(),o("div",null,[u,r,s("ul",null,[s("li",null,[n("此处使用 Django 2.2，若想使用 Django 3.X 版本仅供参考 "),s("ul",null,[s("li",null,[n("Django 新建项目，新建 APP，可参看"),s("a",k,[n("Django 中文网"),e(a)]),n(" or "),s("a",d,[n("https://code.djangoproject.com/"),e(a)])])])])]),m,s("ul",null,[s("li",null,[n("参见下一篇："),s("a",v,[n("【python】使用 requests 进行 HTTP 的请求"),e(a)])])])])}const _=p(i,[["render",b],["__file","【python】Django 2.X 3.X dajianzhuce、denglufuwuqi，daiguanliyuanchakanquanxianyanzheng.html.vue"]]),w=JSON.parse('{"path":"/blogs/developer/python/【python】Django 2.X 3.X dajianzhuce、denglufuwuqi，daiguanliyuanchakanquanxianyanzheng.html","title":"【python】Django 2.X 3.X 搭建注册、登录服务器，带管理员查看权限验证","lang":"zh-CN","frontmatter":{"title":"【python】Django 2.X 3.X 搭建注册、登录服务器，带管理员查看权限验证","date":"2024-06-19T00:00:00.000Z","tags":["django","web"],"categories":["Python"]},"headers":[],"git":{"createdTime":1732772000000,"updatedTime":1744078224000,"contributors":[{"name":"ReWi","email":"RejoiceWindow@yeah.net","commits":3},{"name":"ReWi","email":"RejoiceWindow@yeah.com","commits":2}]},"filePathRelative":"blogs/developer/python/【python】Django 2.X 3.X 搭建注册、登录服务器，带管理员查看权限验证.md"}');export{_ as comp,w as data};
