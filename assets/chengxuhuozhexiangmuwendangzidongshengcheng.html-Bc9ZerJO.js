import{_ as s,o as n,c as e,a}from"./app-De5JuplM.js";const i={},l=a(`<h1 id="自动文档-mkdocs-mkdocstrings" tabindex="-1"><a class="header-anchor" href="#自动文档-mkdocs-mkdocstrings"><span>自动文档 MkDocs + mkdocstrings</span></a></h1><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">pip <span class="token function">install</span> mkdocs mkdocstrings mkdocs-material</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="初始化-mkdocs-配置" tabindex="-1"><a class="header-anchor" href="#初始化-mkdocs-配置"><span>初始化 MkDocs 配置</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">mkdocs new PyKitReWi</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="构建文档" tabindex="-1"><a class="header-anchor" href="#构建文档"><span>构建文档</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">mkdocs build</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="运行本地服务器" tabindex="-1"><a class="header-anchor" href="#运行本地服务器"><span>运行本地服务器</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">mkdocs serve</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="自动文档-sphinx-autodoc" tabindex="-1"><a class="header-anchor" href="#自动文档-sphinx-autodoc"><span>自动文档 Sphinx + autodoc</span></a></h1><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">pip <span class="token function">install</span> sphinx</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="初始化-sphinx-配置-在库的根目录下运行" tabindex="-1"><a class="header-anchor" href="#初始化-sphinx-配置-在库的根目录下运行"><span>初始化 Sphinx 配置： 在库的根目录下运行：</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">sphinx-quickstart</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="配置-autodoc-在-conf-py-中添加-autodoc-扩展" tabindex="-1"><a class="header-anchor" href="#配置-autodoc-在-conf-py-中添加-autodoc-扩展"><span>配置 autodoc： 在 conf.py 中添加 autodoc 扩展：</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">extensions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;sphinx.ext.autodoc&#39;</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>生成文档： 在库代码中为你的函数、类、方法添加 docstring，然后在 Sphinx 的 .rst 文件中使用 autodoc 指令来自动提取这些 docstring 生成文档</p><div class="language-rst line-numbers-mode" data-highlighter="prismjs" data-ext="rst" data-title="rst"><pre class="language-rst"><code><span class="line">.. automodule:: your_module</span>
<span class="line">   :members:</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="构建文档-使用以下命令生成-html-格式的文档" tabindex="-1"><a class="header-anchor" href="#构建文档-使用以下命令生成-html-格式的文档"><span>构建文档： 使用以下命令生成 HTML 格式的文档：</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">make</span> html</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="常见的格式是-google-风格的-docstring-格式。" tabindex="-1"><a class="header-anchor" href="#常见的格式是-google-风格的-docstring-格式。"><span>常见的格式是 Google 风格的 docstring 格式。</span></a></h1><p>这种注释规范通常是用于 Python 中的文档字符串（docstring），它是为了详细说明函数、方法或类的参数、返回值和用法。常见的格式是 Google 风格的 docstring 格式。</p><ol><li><strong>Args:</strong> 列出了所有函数参数的名称、类型以及它们的作用。</li><li><strong>Returns:</strong> 说明了函数的返回值的类型及其含义。</li><li><strong>Usage:</strong> 通常用于提供一些用法示例，帮助开发者理解如何调用该函数。</li></ol><h2 id="风格" tabindex="-1"><a class="header-anchor" href="#风格"><span>风格</span></a></h2><p>在 Python 中，有几种常见的文档字符串（docstring）风格，每种风格具有不同的格式和规范。以下是一些主要的 docstring 风格：</p><h3 id="_1-google-风格" tabindex="-1"><a class="header-anchor" href="#_1-google-风格"><span>1. <strong>Google 风格</strong></span></a></h3><p>这种风格清晰、简洁，通常被很多 Python 项目使用，尤其是在 Google 的开源项目中。它以 <strong>Args</strong>、<strong>Returns</strong>、<strong>Raises</strong> 等关键词来组织文档。</p><p><strong>示例：</strong></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">def</span> <span class="token function">connect_signal</span><span class="token punctuation">(</span>class_type<span class="token punctuation">,</span> signal_sender<span class="token punctuation">,</span> signal_receiver<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    Connects a signal sender to a signal receiver (slot function).</span>
<span class="line"></span>
<span class="line">    Args:</span>
<span class="line">        class_type (type): The class type to instantiate (class object).</span>
<span class="line">        signal_sender (object): The object that sends the signal (should have a signal mechanism).</span>
<span class="line">        signal_receiver (Callable): The function to connect as the signal receiver (slot function).</span>
<span class="line"></span>
<span class="line">    Returns:</span>
<span class="line">        object: The instantiated class object.</span>
<span class="line"></span>
<span class="line">    Raises:</span>
<span class="line">        ValueError: If the signal_sender is invalid.</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">pass</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-numpy-scipy-风格" tabindex="-1"><a class="header-anchor" href="#_2-numpy-scipy-风格"><span>2. <strong>NumPy/SciPy 风格</strong></span></a></h3><p>NumPy 和 SciPy 的文档风格与 Google 风格类似，但它在参数描述部分的格式有所不同，特别是对可选参数和默认值的描述。</p><p><strong>示例：</strong></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">def</span> <span class="token function">connect_signal</span><span class="token punctuation">(</span>class_type<span class="token punctuation">,</span> signal_sender<span class="token punctuation">,</span> signal_receiver<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    Connects a signal sender to a signal receiver (slot function).</span>
<span class="line"></span>
<span class="line">    Parameters</span>
<span class="line">    ----------</span>
<span class="line">    class_type : type</span>
<span class="line">        The class type to instantiate (class object).</span>
<span class="line">    signal_sender : object</span>
<span class="line">        The object that sends the signal (should have a signal mechanism).</span>
<span class="line">    signal_receiver : Callable</span>
<span class="line">        The function to connect as the signal receiver (slot function).</span>
<span class="line"></span>
<span class="line">    Returns</span>
<span class="line">    -------</span>
<span class="line">    object</span>
<span class="line">        The instantiated class object.</span>
<span class="line"></span>
<span class="line">    Raises</span>
<span class="line">    ------</span>
<span class="line">    ValueError</span>
<span class="line">        If the signal_sender is invalid.</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">pass</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-restructuredtext-rest-风格" tabindex="-1"><a class="header-anchor" href="#_3-restructuredtext-rest-风格"><span>3. <strong>reStructuredText（reST）风格</strong></span></a></h3><p>reStructuredText 风格是 Python 文档工具（如 Sphinx）使用的默认风格。它通常用于生成文档，特别是用于 Python 项目的 API 文档。它使用 <code>:param</code>, <code>:type</code>, <code>:return</code> 等标记。</p><p><strong>示例：</strong></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">def</span> <span class="token function">connect_signal</span><span class="token punctuation">(</span>class_type<span class="token punctuation">,</span> signal_sender<span class="token punctuation">,</span> signal_receiver<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    Connects a signal sender to a signal receiver (slot function).</span>
<span class="line"></span>
<span class="line">    :param class_type: The class type to instantiate (class object).</span>
<span class="line">    :type class_type: type</span>
<span class="line">    :param signal_sender: The object that sends the signal (should have a signal mechanism).</span>
<span class="line">    :type signal_sender: object</span>
<span class="line">    :param signal_receiver: The function to connect as the signal receiver (slot function).</span>
<span class="line">    :type signal_receiver: Callable</span>
<span class="line">    :return: The instantiated class object.</span>
<span class="line">    :rtype: object</span>
<span class="line">    :raises ValueError: If the signal_sender is invalid.</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">pass</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-epytext-风格" tabindex="-1"><a class="header-anchor" href="#_4-epytext-风格"><span>4. <strong>Epytext 风格</strong></span></a></h3><p>Epytext 是一种较旧的 Python docstring 风格，广泛用于早期的 Python 项目。它与 reStructuredText 相似，但稍微简化了标记格式。</p><p><strong>示例：</strong></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">def</span> <span class="token function">connect_signal</span><span class="token punctuation">(</span>class_type<span class="token punctuation">,</span> signal_sender<span class="token punctuation">,</span> signal_receiver<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    Connects a signal sender to a signal receiver (slot function).</span>
<span class="line"></span>
<span class="line">    @param class_type: The class type to instantiate (class object).</span>
<span class="line">    @type class_type: type</span>
<span class="line">    @param signal_sender: The object that sends the signal (should have a signal mechanism).</span>
<span class="line">    @type signal_sender: object</span>
<span class="line">    @param signal_receiver: The function to connect as the signal receiver (slot function).</span>
<span class="line">    @type signal_receiver: Callable</span>
<span class="line">    @return: The instantiated class object.</span>
<span class="line">    @rtype: object</span>
<span class="line">    @raise ValueError: If the signal_sender is invalid.</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">pass</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-plain-text-风格" tabindex="-1"><a class="header-anchor" href="#_5-plain-text-风格"><span>5. <strong>Plain Text 风格</strong></span></a></h3><p>有些项目可能会选择最简洁的方式来编写 docstring，即不使用任何特定格式或标记，而仅仅提供普通的文本说明。这种风格通常是手动书写的，并且没有结构化的信息。</p><p><strong>示例：</strong></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">def</span> <span class="token function">connect_signal</span><span class="token punctuation">(</span>class_type<span class="token punctuation">,</span> signal_sender<span class="token punctuation">,</span> signal_receiver<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    Connects a signal sender to a signal receiver.</span>
<span class="line">    </span>
<span class="line">    This function instantiates the class provided by \`class_type\` and connects </span>
<span class="line">    the \`signal_sender\` to the \`signal_receiver\`. It raises a ValueError if </span>
<span class="line">    the signal_sender is not valid.</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">pass</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="兼容性" tabindex="-1"><a class="header-anchor" href="#兼容性"><span>兼容性</span></a></h3><p>关于不同风格之间的兼容性，实际上每种风格的文档字符串都是兼容的，因为它们都是以纯文本格式存储在 Python 文件中的。关键的不同在于如何解析这些字符串：</p><ol><li><p><strong>自动化工具支持：</strong></p><ul><li><strong>Google 风格</strong>和<strong>NumPy/SciPy 风格</strong>都可以通过工具（如 <strong>PyDoc</strong>, <strong>Sphinx</strong>, <strong>pdoc</strong>）生成文档，支持自动化解析。</li><li><strong>reStructuredText 风格</strong>通常用于 <strong>Sphinx</strong> 生成更复杂的 HTML 和 LaTeX 文档。</li><li><strong>Epytext 风格</strong>主要用于早期的工具和框架，如 <strong>Epytext</strong>，虽然现在已不再广泛使用。</li><li><strong>Plain Text 风格</strong>没有结构化的标记，因此无法与工具自动生成文档，但对开发者仍然清晰可读。</li></ul></li><li><p><strong>文档工具兼容性：</strong></p><ul><li><strong>Sphinx</strong> 和 <strong>PyDoc</strong> 都能够解析 <strong>reStructuredText</strong> 和 <strong>Google 风格</strong>，并生成良好的文档。</li><li><strong>Sphinx</strong> 可以通过 <code>napoleon</code> 扩展支持 <strong>Google 风格</strong> 和 <strong>NumPy 风格</strong>，因此它们在 Sphinx 中是兼容的。</li><li>对于 <strong>Epytext</strong> 和 <strong>Plain Text 风格</strong>，虽然它们不如前两者在文档生成方面那么强大，但它们仍然可以作为常规文档说明被理解和使用。</li></ul></li></ol><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><ul><li><strong>兼容性</strong>：虽然不同的 docstring 风格之间有些差异，但它们都以纯文本形式存储，因此在基本的阅读和理解上是兼容的。不同风格的主要区别在于它们是否容易与自动化工具（如 <strong>Sphinx</strong>, <strong>PyDoc</strong>）兼容。</li><li><strong>选择合适的风格</strong>：如果你的项目需要自动生成文档或与其他工具兼容，建议使用 <strong>Google 风格</strong> 或 <strong>reStructuredText 风格</strong> 。如果只是为了可读性或简单说明，<strong>Plain Text 风格</strong> 也可以，但不支持自动化工具的文档生成。</li></ul><h2 id="各种参数格式的类型" tabindex="-1"><a class="header-anchor" href="#各种参数格式的类型"><span>各种参数格式的类型</span></a></h2><p>除了 <code>Args:</code> 和 <code>Returns:</code>，还有其他几种常见的参数注释规范：</p><ol><li><p><strong>Raises:</strong> 用于列出函数可能引发的异常类型。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">Raises:</span>
<span class="line">    ValueError: If the input is invalid.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Attributes:</strong> 用于类的 docstring，列出类的属性。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">Attributes:</span>
<span class="line">    attribute_name (type): Description of the attribute.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Example:</strong> 用于提供具体的代码示例，通常位于 <code>Usage:</code> 部分，或者独立作为 <code>Example</code>。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">Example:</span>
<span class="line">    &gt;&gt;&gt; my_function(1, 2)</span>
<span class="line">    3</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Note:</strong> 用于提供额外的备注信息，通常是补充说明。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">Note:</span>
<span class="line">    This method is only available in version 2.0 and above.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Warning:</strong> 用于提醒用户潜在的危险或副作用。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">Warning:</span>
<span class="line">    This function may alter global state.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Todo:</strong> 用于标记未来需要完成的任务。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">Todo:</span>
<span class="line">    Refactor this function for better performance.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">def</span> <span class="token function">connect_signal</span><span class="token punctuation">(</span>class_type<span class="token punctuation">,</span> signal_sender<span class="token punctuation">,</span> signal_receiver<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    Connects a signal sender to a signal receiver (slot function).</span>
<span class="line"></span>
<span class="line">    Args:</span>
<span class="line">        class_type (type): The class type to instantiate (class object).</span>
<span class="line">        signal_sender (object): The object that sends the signal (should have a signal mechanism).</span>
<span class="line">        signal_receiver (Callable): The function to connect as the signal receiver (slot function).</span>
<span class="line"></span>
<span class="line">    Returns:</span>
<span class="line">        object: The instantiated class object.</span>
<span class="line"></span>
<span class="line">    Usage:</span>
<span class="line">        signal = connect_signal(MyClass, sender, receiver)</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">pass</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,53),t=[l];function c(r,d){return n(),e("div",null,t)}const o=s(i,[["render",c],["__file","chengxuhuozhexiangmuwendangzidongshengcheng.html.vue"]]),u=JSON.parse('{"path":"/blogs/platform/cloud/chengxuhuozhexiangmuwendangzidongshengcheng.html","title":"程序或者项目文档自动生成","lang":"zh-CN","frontmatter":{"title":"程序或者项目文档自动生成","date":"2024-11-26T11:00:00.000Z","tags":["document"],"categories":["cloud","web"]},"headers":[{"level":2,"title":"初始化 MkDocs 配置","slug":"初始化-mkdocs-配置","link":"#初始化-mkdocs-配置","children":[]},{"level":2,"title":"构建文档","slug":"构建文档","link":"#构建文档","children":[]},{"level":2,"title":"运行本地服务器","slug":"运行本地服务器","link":"#运行本地服务器","children":[]},{"level":2,"title":"初始化 Sphinx 配置： 在库的根目录下运行：","slug":"初始化-sphinx-配置-在库的根目录下运行","link":"#初始化-sphinx-配置-在库的根目录下运行","children":[]},{"level":2,"title":"配置 autodoc： 在 conf.py 中添加 autodoc 扩展：","slug":"配置-autodoc-在-conf-py-中添加-autodoc-扩展","link":"#配置-autodoc-在-conf-py-中添加-autodoc-扩展","children":[]},{"level":2,"title":"构建文档： 使用以下命令生成 HTML 格式的文档：","slug":"构建文档-使用以下命令生成-html-格式的文档","link":"#构建文档-使用以下命令生成-html-格式的文档","children":[]},{"level":2,"title":"风格","slug":"风格","link":"#风格","children":[{"level":3,"title":"1. Google 风格","slug":"_1-google-风格","link":"#_1-google-风格","children":[]},{"level":3,"title":"2. NumPy/SciPy 风格","slug":"_2-numpy-scipy-风格","link":"#_2-numpy-scipy-风格","children":[]},{"level":3,"title":"3. reStructuredText（reST）风格","slug":"_3-restructuredtext-rest-风格","link":"#_3-restructuredtext-rest-风格","children":[]},{"level":3,"title":"4. Epytext 风格","slug":"_4-epytext-风格","link":"#_4-epytext-风格","children":[]},{"level":3,"title":"5. Plain Text 风格","slug":"_5-plain-text-风格","link":"#_5-plain-text-风格","children":[]},{"level":3,"title":"兼容性","slug":"兼容性","link":"#兼容性","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"各种参数格式的类型","slug":"各种参数格式的类型","link":"#各种参数格式的类型","children":[]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]}],"git":{"createdTime":1732772000000,"updatedTime":1744078224000,"contributors":[{"name":"ReWi","email":"RejoiceWindow@yeah.net","commits":3},{"name":"ReWi","email":"RejoiceWindow@yeah.com","commits":2}]},"filePathRelative":"blogs/platform/cloud/程序或者项目文档自动生成.md"}');export{o as comp,u as data};
